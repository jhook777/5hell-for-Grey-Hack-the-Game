if DEBUG then print("<size=75%>loading contrib.5pk for 5hell v 4.2.3...(135.030)</size>)")
  // start games made by Plu70
  bat = function(s)
      // battleship by Plu70, aka ra'al, aka jhook777  2021
      // start with 10 x 10 grid
      // 24.905kb
      // valid launch params:
      //
      // -c -- all color lines are null
      // -d -- debug mode, no wait(1)'s and verbose
      // -dt - early terminate: spawn ships, print locations and end
      // -s -- self play: ai vs rng
      // -cd, -cd -s, -d -s, -c -s, also valid combinations
      //
      // order matters with launch params
      // ai is marginally better than random*
      ////////////////////////
      game_file = null  // single player for now
      DIFFICULTY = "hard" // lol jk, still need better ai algorithm. easy or medium available at runtime
      EARLYTERM = false
      self_play = false
      //if params.len >= 1 and (params[0] == "-s" or params [1] == "-s") then self_play = true
      //debug = globals.DEBUG
      disable_color = false
      
      /////////
      if s == "-s" then self_play = true
      ////////////////////////
      globals.MIN = 0 // minimum X/Y values for grid size
      globals.MAX = 9 // maximum X/Y values for grid size
      rng = range(MIN,MAX)
      rnd = range(MIN,MAX)
      rng.shuffle
      rnd.shuffle
      
      ///BEGIN GRAPHICS//////
      
      print_logo = function()
          print(colorRed+" _           _   _   _           _     _         "+CT)
          print(colorGreen+"| |         | | | | | |         | |   (_)       "+CT)
          print(colorGreen+"| |__   __ _| |_| |_| | ___  ___| |__  _ _ __   "+CT)
          print(colorGreen+"| '_ \ / _` | __| __| |/ _ \/ __| '_ \| | '_ \  "+CT)
          print(colorRed+"| |_) | (_| | |_| |_| |  __/\__ \ | | | | |_) | "+CT)
          print(colorGreen+"|_.__/ \__,_|\__|\__|_|\___||___/_| |_|_| .__/  "+CT)
          print(colorGreen+"                                       | |      "+CT)
          print(colorGreen+"                                       |_|      "+CT)
      
      end function
      
      display_ship_one = function()
      
          ship_one = ["                                                                       .",	"                                     # #  ( )                           ","                                  ___#_#___|__                          ",	"                              _  |____________|  _                      ",	"                       _=====| | |            | | |==== _               ",	"                 =====| |.---------------------------. | |====          ",	"   <--------------------'   .  .  .  .  .  .  .  .   '--------------/   ",	"     \                                                             /    ",	colorLightBlue+"  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww "+CT,	colorLightBlue+"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT,	colorLightBlue+"   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww  "+CT]
          for ln in ship_one
              print(ln)
          end for
      end function
      
      display_ship_two = function()
      
          ship_two = ["                                                                               ","                                     |__                                       ",	"                                     |\/                                       ",	"                                     ---                                       ",	"                                     / | [                                     ",	"                              !      | |||                                     ",	"                            _/|     _/|-++'                                    ",	"                        +  +--|    |--|--|_ |-                                 ",	"                     { /|__|  |/\__|  |--- |||__/                              ",	"                    +---------------___[}-_===_.'____                 /\       ",	"                ____`-' ||___-{]_| _[}-  |     |_[___\==--            \/   _   ",	" __..._____--==/___]_|__|_____________________________[___\==--____,------' .7 ",	"|                                                                     BB-61/   ",	" \_________________________________________________________________________|   ",	colorLightBlue+"  Matthew Bacewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT,	colorLightBlue+"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"+CT	]
          for ln in ship_two
              print(ln)
          end for
      end function
      
      display_ship_three = function()
          // stub
      end function
      
      display_long_rule = function()
          print(colorGreen+"</b>[.0....1....2.....3....4.....5....6....7.....8....9.]</color>")  // adjust this to fit your terminal
      end function
      /////END GRAPHICS /////////
      
      /////// SANITY CHECK /////
      check_sanity = function(sobj) // ensure ships don't overlap
          if globals.DEBUG then print("Checking Sanity...")
          if globals.DEBUG then print(sobj.frigate)
          if globals.DEBUG then print(sobj.cruiser)
          if globals.DEBUG then print(sobj.battleship)
      
          bshipX = sobj.battleship.X
          bshipY = sobj.battleship.Y
          cshipX = sobj.cruiser.X
          cshipY = sobj.cruiser.Y
          fshipX = sobj.frigate.X
          fshipY = sobj.frigate.Y
      
          if globals.DEBUG then print( bshipX  )
      
          collision = 0
          static_ship = "battleship"
      
          for fx in fshipX
              if fx > globals.MAX then collision = "out_of_bounds"
              if cshipX.indexOf(fx) >= 0 then
                  for fy in fshipY
                      if cshipY.indexOf(fy) >= 0 then
                          collision = "frigate"
                          static_ship = "cruiser"
                          if fy > globals.MAX then collision = "out_of_bounds"
                      end if
                  end for
              end if
          end for
      
          for bx in bshipX
              if bx > globals.MAX then collision = "out_of_bounds"
              if globals.DEBUG then print("bx:"+bx)
              if globals.DEBUG then print("cruiser: index of bx: "+cshipX.indexOf(bx))
              if cshipX.indexOf(bx) >= 0 and cshipX.hasIndex(cshipX.indexOf(bx)) then
                  for by in bshipY
                      if globals.DEBUG then print("by:"+by)
                      if cshipY.indexOf(by) >= 0 and cshipY.hasIndex(cshipY.indexOf(by)) then collision = "cruiser"
      
                  end for
              end if
      
              if fshipX.indexOf(bx) >= 0 then
                  for by in bshipY
                      if fshipY.indexOf(by) >= 0 then collision = "frigate"
                      if by > globals.MAX then collision = "out_of_bounds"
                  end for
              end if
      
          end for
          for cx in cshipX
              if cx > globals.MAX then collision = "out_of_bounds"
          end for
          for cy in cshipY
              if cy > globals.MAX then collision = "out_of_bounds"
          end for
          if globals.DEBUG then print("coll:"+collision)
          if collision then
              if globals.DEBUG then print("Handling collision between "+static_ship+" and "+collision+"...")
              // this tactic is known as 'do something, even if it's wrong'
              nX = sobj[collision]["X"]
              nY = sobj[collision]["Y"]
              if nX.len > nY.len then
                  if nY[0] <= 0 then nY[0] = 3
                  if nY[0] >= 9 then nY[0] = 5
                  if nY[0] == 2 or nY[0] == 4 or nY[0] == 6 then nY[0] = nY[0] + 1
                  rr = range(-1,1)
                  rr.shuffle
                  nY[0] = nY[0] + rr.pop
                  if nY[0] > globals.MAX then collision = "out_of_bounds"
              else
                  if nX[0] <= 0 then nX[0] = 3
                  if nX[0] >= 9 then nX[0] = 5
                  if nX[0] == 2 or nX[0] == 4 or nX[0] == 6 then nX[0] = nX[0] + 1
                  rr = range(-1,1)
                  rr.shuffle
                  nX[0] = nX[0] + rr.pop
                  if nX[0] > globals.MAX then collision = "out_of_bounds"
              end if
          end if
          //////
          if globals.DEBUG then print("Handled. Back propagating...")
          if globals.DEBUG and not collision then print("Sanity check complete.")
          return collision// true for recursion or false if no collisions and sane
      end function
      //// END SANITY CHECK //////
      
      map = {}
      map.grid = []
      map.make = function()
          map.grid = range(globals.MIN,globals.MAX)
          for e in range(globals.MIN,globals.MAX)
              map.grid[e] = range(globals.MIN,globals.MAX)
              for c in map.grid[e]
                  if globals.DEBUG then
                      map.grid[e][c] = e+","+c
                  else
                      map.grid[e][c] = colorLightBlue+"www"+CT
                  end if
              end for
          end for
      end function
      map.get_cell = function(x,y)
          return map["grid"][x][y]
      end function
      map.edit_cell = function(xy,beef,actor)
          split = xy.split(" ")
          if split.len < 2 then
              split.push("0")
              if split.len < 2 then
                  split.push("0")
              end if
          end if
          x = split[0].val
          y = split[1].val
          edit = "www"
          if beef > 0 then // hit
              if actor == computa.label then
                  edit = colorOrange+"***"+CT
              else
                  edit = colorRed+"***"+CT
              end if
          else
              if beef == 0 then // miss
                  if actor == computa.label then
                      edit = colorLightBlue+"###"+CT
                  else
                      edit = colorWhite+"###"+CT
                      if map["grid"][x][y] == colorLightBlue+"###"+CT then edit = (colorWhite+"#"+CT+colorLightBlue+"#"+CT+colorWhite+"#"+CT)
                  end if
              end if
          end if
          if globals.DEBUG then print("X:"+x+" Y:"+y+" edit:"+edit)
          if map["grid"][x][y] == (colorRed+"***"+CT) then
              if beef then
                  edit = colorRed+"*"+CT+colorOrange+"*"+CT+colorRed+"*"+CT
              else
                  return beef
              end if
          end if
          if beef and map["grid"][x][y] == colorOrange+"***"+CT then edit = colorRed+"*"+CT+colorOrange+"*"+CT+colorRed+"*"+CT
          if not beef and map["grid"][x][y] == colorOrange+"***"+CT then edit = (colorWhite+"#"+CT+colorOrange+"#"+CT+colorWhite+"#"+CT)
          if not beef and map["grid"][x][y] == (colorWhite+"###"+CT) then edit = (colorWhite+"#"+CT+colorLightBlue+"#"+CT+colorWhite+"#"+CT)
          map["grid"][x][y] = edit
          return beef
      end function
      map.display_grid = function()
          buf = ""
          y = globals.MAX
          while y >= globals.MIN
              for x in range(globals.MIN,globals.MAX)
                  buf = buf + "." + map.get_cell(x,y) + "."
              end for
              buf = buf + colorGreen+"</b>.["+y+"]</color>"+ char(10)
              y = y - 1
          end while
          print(buf)
          display_long_rule
      end function
      map.make
      
      
      
      player = {}
      player.label = ""
      player.opponent = ""
      player.BUFFER = {}
      player.position = {}
      player.display_ship_coordinates = function()
          for c in self.position
              print(">"+c.value.label+":")
              print("[X: "+c.value.X+" Y:"+c.value.Y+"]")
          end for
      end function
      player.fire = function(coords)
          aim = coords.split(" ")
          print(colorOrange+self.label + " fires at " + aim[0] + ", " + aim[1] + " and... "+CT)
          wait(1)
          count = 0
          for ship_obj in self.opponent.position
              if globals.DEBUG then print(ship_obj)
              shipX = ship_obj.value.X
              shipY = ship_obj.value.Y
              count = count + 1
              for sx in shipX
                  if aim[0].val == sx then
                      for sy in shipY
                          if aim[1].val == sy then
                              print(colorRed+"<b>HITS!</b>"+CT+char(10))
                              summary.accuracy.update(self.label, "hit", coords)
                              return count
                          end if
                      end for
                  end if
              end for
          end for
          print("<b>MISSES!</b>"+char(10))
          summary.accuracy.update(self.label, "miss", coords)
          return 0
      end function
      player.spawn_ship = function(ship)
          top_edge = false
          bottom_edge = false
          left_edge = false
          right_edge = false
          i = 0
          if ship.hasIndex("frigate") then i = ship.frigate
          if ship.hasIndex("cruiser") then i = ship.cruiser
          if ship.hasIndex("battleship") then i = ship.battleship
          if globals.DEBUG then print("["+colorWhite+ship.label+CT+"]")
      
          transmform = function(sob)
              if sob.X[0] == globals.MIN then left_edge = true
              if sob.X[-1] == globals.MAX then right_edge = true
              if sob.Y[0] == globals.MIN then bottom_edge = true
              if sob.Y[-1] == globals.MAX then top_edge = true
              if sob.X.len > 1 then
                  top_edge = true
                  bottom_edge = true
              end if
              if sob.Y.len > 1 then
                  left_edge = true
                  right_edge = true
              end if
              vote_down = 1
              vote_up = 1
              vote_left = 1
              vote_right = 1
              if top_edge then vote_up = 0
              if bottom_edge then vote_down = 0
              if left_edge then vote_left = 0
              if right_edge then vote_right = 0
              rn = range(1,10) // do not set globals.MIN to zero
              rn.shuffle
              vote_up = (vote_up * rn.pop)
              if globals.DEBUG then print(vote_up+":up")
              rn.shuffle
              vote_down = (vote_down * rn.pop)
              if globals.DEBUG then print(vote_down+":down")
              rn.shuffle
              vote_right = (vote_right * rn.pop)
              if globals.DEBUG then print(vote_right+":right")
              rn.shuffle
              vote_left = (vote_left * rn.pop)
              if globals.DEBUG then print(vote_left+":left")
              tally = [vote_up,vote_down,vote_left,vote_right]
              tally.sort
              tally.reverse
              winner = tally[0]
              if globals.DEBUG then print(winner)
              if winner == 0 then return
              if winner == vote_up then //up
                  sob.Y.push(sob.Y[-1]+1)
                  sob.Y.sort
                  return
              end if
              if winner == vote_down then //down
                  sob.Y.push(sob.Y[0]-1)
                  sob.Y.sort
                  return
              end if
              if winner == vote_left then // left
                  sob.X.push(sob.X[0]-1)
                  sob.X.sort
                  return
              end if
              if winner == vote_right then //right
                  sob.X.push(sob.X[-1]+1)
                  sob.X.sort
                  return
              end if
          end function
      
          while i > 0
              transmform(ship)
              i = i - 1
          end while
      end function
      
      player1 = new player
      player1.label = "Player"
      player1.BUFFER = {}
      player1.position = {}
      player1.position.frigate = {"X":[0], "Y":[0], "frigate":1, "label":"frigate"}
      player1.position.cruiser = {"X":[0], "Y":[0], "cruiser":2, "label":"cruiser"}
      player1.position.battleship = {"X":[0], "Y":[0], "battleship":4, "label":"battleship"}  // position ship then spawn_ship
      player1.setup = function(x,y)
          self.position.frigate.X[0] = x[0]
          self.position.frigate.Y[0] = y[0]
          x.shuffle
          y.shuffle
          self.position.cruiser.X[0] = x[0]
          self.position.cruiser.Y[0] = y[0]
          x.shuffle
          y.shuffle
          self.position.battleship.X[0] = x[0]
          self.position.battleship.Y[0] = y[0]
          self.spawn_ship(self.position.frigate)
          self.spawn_ship(self.position.cruiser)
          self.spawn_ship(self.position.battleship)  // position ship then spawn_ship
          while check_sanity(self.position)
          end while
      end function
      player1.confirm = function(cmd)
          // cmd is user_input so respond only to correct input and drop all else
          if cmd == "" then cmd = "0 0"
          aim = cmd.split(" ")
          if aim.len < 2 then
              aim.push("0")
              if aim.len < 2 then
                  aim.push("0")
              end if
          end if
          aim[0] = aim[0].val
          aim[1] = aim[1].val
          cmd = aim.join(" ")
          if player1.BUFFER.hasIndex(cmd) then
              print(colorOrange+"That would be a waste of ammunition!"+CT)
              return 0 // command denied
          else
              player1.BUFFER.push(cmd)
          end if
          aim = cmd.split(" ")
          if aim[0].val > globals.MAX or aim[1].val > globals.MAX or aim[0].val < globals.MIN or aim[1].val < globals.MIN then
              print(colorOrange+"</b>Target designation is out of bounds!</color>")
              return 0
          end if
          return cmd // confirmed command
      end function
      
      
      /// BEGIN Computa
      computa = new player
      computa.label = "Computa"
      computa.BUFFER = {}
      computa.position = {}
      computa.position.frigate = {"X":[0], "Y":[0], "frigate":1, "label":"frigate"} // x_array, y_array, label:# of transorms in spawn_ship
      computa.position.cruiser = {"X":[0], "Y":[0], "cruiser":2, "label":"cruiser"} // adjust check_score when adding new ship classes!
      computa.position.battleship = {"X":[0], "Y":[0], "battleship":4, "label":"battleship"} // position ship then spawn_ship
      computa.AI = {}
      computa.AI.ghost_ship = {}
      computa.AI.ghost_ship.frigate = {"X":[1], "Y":[1], "frigate":1, "label":"ghost_frigate"}
      computa.AI.ghost_ship.cruiser = {"X":[8], "Y":[8], "cruiser":2, "label":"ghost_cruiser"}
      computa.AI.ghost_ship.battleship = {"X":[5], "Y":[5], "battleship":4, "label":"ghost_battleship"}
      computa.AI.c_list = []
      computa.wake_AI = function()
          self.spawn_ship(self.AI.ghost_ship.battleship)
          self.spawn_ship(self.AI.ghost_ship.frigate)
          self.spawn_ship(self.AI.ghost_ship.cruiser)
          t_x = []
          t_y = []
          t_cmd = ""
          for s in self.AI.ghost_ship
              t_x = s.value.X
              t_y = s.value.Y
              t_cmd = t_x[0]+" "+t_y[0]
              self.AI.c_list.push(t_cmd)
          end for
      end function
      computa.setup = function(x,y)
          self.position.frigate.X[0] = x[0]
          self.position.frigate.Y[0] = y[0]
          x.shuffle
          y.shuffle
          self.position.cruiser.X[0] = x[0]
          self.position.cruiser.Y[0] = y[0]
          x.shuffle
          y.shuffle
          self.position.battleship.X[0] = x[0]
          self.position.battleship.Y[0] = y[0]
          self.spawn_ship(self.position.frigate)
          self.spawn_ship(self.position.cruiser)
          self.spawn_ship(self.position.battleship)  // position ship then spawn_ship
          while check_sanity(self.position)
          end while
      end function
      computa.AI.update_ghosts = function(new_X, new_Y, new_T)
          self.ghost_ship.frigate.X = new_X
          self.ghost_ship.frigate.Y = new_Y
          self.ghost_ship.cruiser.X = new_X
          self.ghost_ship.cruiser.Y = new_Y
          self.ghost_ship.battleship.X = new_X
          self.ghost_ship.battleship.Y = new_Y
          self.ghost_ship.frigate.frigate = new_T
          self.ghost_ship.cruiser.cruiser = new_T
          self.ghost_ship.battleship.battleship = new_T
          computa.spawn_ship(self.ghost_ship.frigate)
          computa.spawn_ship(self.ghost_ship.cruiser)
          computa.spawn_ship(self.ghost_ship.battleship)
      end function
      computa.AI.alpha = function()
          last_shot = summary.accuracy.Computa.hist[-2]
          if globals.DEBUG then print("last shot: "+last_shot)
          last_action = summary.accuracy.Computa.hist[-1]
          if self.c_list.len < 1  or last_action == "hit" then //c_list_empty = true
              new_C = last_shot.split(" ")
              if globals.DEBUG then print(new_C)
              new_x = [new_C[0].val]
              new_y = [new_C[1].val]
              new_t = 0
              if last_action == "miss" then
                  new_t = 6
              else
                  new_t = 2
              end if
              self.purge_ghosts
              self.update_ghosts(new_x,new_y, new_t)
              t_x = []
              t_y = []
              t_cmd = ""
              for s in self.ghost_ship
                  t_x = s.value.X
                  t_y = s.value.Y
                  t_y.shuffle
                  t_x.shuffle
                  t_cmd = t_x[0]+" "+t_y[0]
                  if globals.DEBUG then print("Pushing "+t_cmd+" to c_list...")
                  if not self.c_list.hasIndex(t_cmd) then self.c_list.push(t_cmd)
              end for
          end if
          if self.c_list.len < 1 then // panic
              rng.shuffle
              rnd.shuffle
              t_cmd = [rng[0], rnd[0]]
              t_cmd = t_cmd.join(" ")
              self.c_list.push(t_cmd)
          end if
          self.c_list.shuffle
          return  self.c_list.pop // string of type "X Y" where X and Y are within outer.MIN, MAX
      end function
      computa.AI.panic_level = 4
      computa.AI.purge_ghosts = function()
          self.ghost_ship.frigate.X = []
          self.ghost_ship.frigate.Y = []
          self.ghost_ship.cruiser.X = []
          self.ghost_ship.cruiser.Y = []
          self.ghost_ship.battleship.X = []
          self.ghost_ship.battleship.Y = []
      end function
      computa.AI.omega = function() // when computa has found all three of Payer1's ships
          last_shot = summary.accuracy.Computa.hist[-2]
          hl = summary.accuracy.Computa.hit_list
          if globals.DEBUG then print("hit_list: "+hl)
          last_action = summary.accuracy.Computa.hist[-1]
          if self.c_list.len < 1  or last_action == "hit" then
              hl.shuffle
              new_C = hl[0].split(" ")
              if globals.DEBUG then print(new_C)
              new_x = [new_C[0].val]
              new_y = [new_C[1].val]
              new_t = 0
              if last_action == "miss" then
                  new_t = 2
              else
                  new_t = 1
              end if
              self.purge_ghosts
              self.update_ghosts(new_x,new_y, new_t)
              t_x = []
              t_y = []
              t_cmd = ""
              for s in self.ghost_ship
                  t_x = s.value.X
                  t_y = s.value.Y
                  t_y.shuffle
                  t_x.shuffle
                  t_cmd = t_x[0]+" "+t_y[0]
                  if globals.DEBUG then print("Pushing "+t_cmd+" to c_list...")
                  if not self.c_list.hasIndex(t_cmd) then self.c_list.push(t_cmd)
              end for
          end if
          if self.c_list.len < 1 then // panic
              rng.shuffle
              rnd.shuffle
              t_cmd = [rng[0], rnd[0]]
              t_cmd = t_cmd.join(" ")
              self.c_list.push(t_cmd)
          end if
          self.c_list.shuffle
          return  self.c_list.pop // string of type "X Y" where X and Y are within outer.MIN, MAX
      end function
      computa.get_command = function() // obvious stub needs obvious improvement
          ccommand = ""
          if DIFFICULTY == "easy" then
              ccommand = [rng[0], rnd[0]]
              ccommand = ccommand.join(" ")
          else
              if computa.score[0] > 0 and computa.score[1] > 0  and computa.score[2] > 0 then
                  // all ships found, prepare for gg
                  ccommand = self.AI.omega
              else
                  //if computa.score[0] > 0 or computa.score[1] > 0  or computa.score[2] > 0 then
                      //ccommand = [rng[0], rnd[0]]
                      //ccommand = ccommand.join(" ")
              //	else
                      ccommand = self.AI.alpha
                  //end if
              end if
          end if
          if globals.DEBUG then print("sending: "+ccommand)
          rng.shuffle
          rnd.shuffle
          if self.BUFFER.hasIndex(ccommand) then
              if globals.DEBUG then print("!!Repeat detected!!")
              self.AI.panic_level = 8
              ccommand = false
              //return ccommand
          else
              self.BUFFER.push(ccommand)
              self.AI.panic_level = 4
              //return ccommand
          end if
          return ccommand
      end function
      //// END Computa
      
      
      if globals.DEBUG then print("Initializing players...")
      rng = range(MIN,MAX)
      rnd = range(MIN,MAX)
      
      rng.shuffle
      rnd.shuffle
      
      computa.setup(rng,rnd)
      computa.wake_AI
      
      rnd.shuffle
      rng.shuffle
      
      if globals.DEBUG then print("...readying player1...")
      player1.setup(rng,rnd)
      
      player1.opponent = computa
      computa.opponent = player1
      
      player1.score = [0,0,0] // [frigate,cruiser,battleship]
      computa.score = [0,0,0] // [2_tokill,3 tokill,5 tokill] (transorms + 1 to kill)
      check_score = function(bit,act)
          if globals.DEBUG then print("Scoring...")
          if globals.DEBUG then print(act+":"+bit)
          if act == player1.label then
              if not bit then return 1
              player1.score[bit-1] = player1.score[bit-1] + 1
              if player1.score.sum == 10 then return 0 // command BUFFER restricts repeat shots
              return 1
          else
              if not bit then return 1
              computa.score[bit-1] = computa.score[bit-1] + 1
              if computa.score.sum == 10 then return 0
              return 1
          end if
      end function
      
      DATASET = {}
      DATASET.accuracy = {}
      DATASET.accuracy.Computa = {}
      DATASET.accuracy.Player = {}
      summary = new DATASET
      summary.purge = function()
          if globals.DEBUG then print("purging...")
          self.accuracy.Computa.hist = []
          self.accuracy.Player.hist = []
      end function
      summary.accuracy.update = function(lbl, event, crds)
          //summary.purge
          if globals.DEBUG then print("updating..."+lbl)
          if lbl == self.Player.label and globals.DEBUG then print("player found!")
          summary["accuracy"][lbl]["hist"].push(crds)
          if globals.DEBUG then print(crds)
          if event == "hit" then // hit
              summary["accuracy"][lbl]["Hits"] = summary["accuracy"][lbl]["Hits"] + 1
              if globals.DEBUG then print("pushing "+crds+" to hit_list...")
              summary["accuracy"][lbl]["hit_list"].push(crds)
          else // miss
              summary["accuracy"][lbl]["Misses"] = summary["accuracy"][lbl]["Misses"] + 1
          end if
          summary["accuracy"][lbl]["hist"].push(event)
      end function
      summary.accuracy.report = function()
          if globals.DEBUG then print("reporting...")
          last_computer_shot = self.Computa.hist
          last_player_shot = self.Player.hist
          if last_computer_shot[-1] == "hit" then
              revent = (colorRed+"<b>HIT!</b>"+CT)
          else
              revent = "<b>MISSED!</b>"
          end if
          print(colorOrange+self.Computa.label+" fired at "+last_computer_shot[-2]+" and "+revent)
          if last_player_shot[-1] == "miss" then
              revent = "<b>MISSED!</b>"
          else
              revent = (colorRed+"<b>HIT!</b>"+CT)
          end if
          print(colorOrange+self.Player.label+" fired at "+last_player_shot[-2]+" and "+revent)
      end function
      summary.widget = function()
          l = self.accuracy.Player.label
          h = self.accuracy.Player.Hits
          m = self.accuracy.Player.Misses
          s = m+h
          print(colorWhite+"|"+l+" accuracy: "+ h +colorGreen+"/"+colorWhite+s+"|"+CT)
      end function
      summary.accuracy.init = function()
          self.Computa = {"label":"Computa", "Hits":0, "Misses":0, "hist":["nothing",0], "hit_list":[]}
          self.Player = {"label":"Player", "Hits":0, "Misses":0, "hist":["nothing",0], "hit_list":[]}
      end function
      summary.accuracy.init
      
      
      if globals.DEBUG then print("...init complete. Starting main...")
      ////// BEGIN MAIN /////////
      battleship = function()
          playing = true
          first_run = true
          if EARLYTERM then playing = false
          if globals.DEBUG and EARLYTERM then player1.display_ship_coordinates
          if globals.DEBUG and EARLYTERM then computa.display_ship_coordinates
          if user_input("Select a difficulty level:"+char(10)+"[EASY] - Commander Rander"+char(10)+"[MEDIUM] - Captain Chao "+char(10)+["||: "]).lower != "EASY" then
              print("MEDIUM difficulty selected. Good luck!")
              DIFFICULTY = "medium"
          else
              print("EASY difficulty selected. Good luck!")
              DIFFICULTY = "easy"
          end if
          ///// game starts here
          while playing
              if not globals.DEBUG then clear_screen
              if not first_run then print_logo
      
              player1.display_ship_coordinates
              if globals.DEBUG then computa.display_ship_coordinates
              if not first_run then summary.accuracy.report
              if globals.DEBUG then print(player1.score)
              if globals.DEBUG then print(computa.score)
              print(colorGreen+"</b>//////////////////////////////////////////////////////</color>")
      
              map.display_grid
              if not first_run then summary.widget
      
              first_run = false
              command = 0
              if self_play then
                  rng.shuffle
                  rnd.shuffle
                  command = [rng[0], rnd[0]]
                  command = command.join(" ")
                  if not globals.DEBUG then wait(1)
              else
                  print("q=quit")
                  command = user_input("Enter coordinates [0-9] as [x y]: ")
                  if command.lower == "q" then return "abandoning ship..."
              end if
              command = player1.confirm(command)
              if command == 0 then continue // belay that order!
              if not globals.DEBUG then clear_screen
              display_ship_one
              playing = check_score(map.edit_cell(command, player1.fire(command), player1.label), player1.label)
      
              if not playing then return("<b>You sunk all of computa's battleships! You Win!</b>")
      
              rng.shuffle // vestigial shuffle
              rnd.shuffle // vestigial shuffle
              wait(1)
              if not globals.DEBUG then clear_screen
      
              display_ship_two
              ai_turn = true
              while ai_turn
                  command = computa.get_command
                  if globals.DEBUG then print("...recieved: "+command)
                  if command == false then continue
                  playing = check_score(map.edit_cell(command, computa.fire(command), computa.label), computa.label)
                  if not playing then return("<b>Computa sunk all of your battleships! You lose!</b>")
                  ai_turn = false
                  wait(1)
                  if not globals.DEBUG then clear_screen
              end while
          end while
      end function
      
      print_logo
      return battleship
  end function

  ///////////////////////////BLACKJACK/////////////////////////////
  ////////////////////////////////////////////////////////////////

  g2 = function()
      // Jokers Wild Blackjack by Plu70 (aka raal, aka jhook777)
      // feel free to use the deck in your own games!
      //localhost = get_shell
      //localmachine = localhost.host_computer
  
    // START 3nigma DECK /////////////////////////////////
    RC = "<color=red>"
    BC = "<color=#606060>"
    GC = "<color=green><b>"
    OC = "<color=#FF8400FF>"
    CW = "<color=white>"
    CLB = "<color=#2382FFFF><b>"
    CC = "</color>"
    SU = ["V","^","+","&"] // ace: heart, spade, diamond, club; index: 1, 14, 27, 40
    //cards = params[0].split(",")
    //cards.pull
    //num_cards = cards.len - 1
    Deck = {}
    i = 1
    C = null
    Deck[0] = RC+" _____ "+CC+"::"+RC+"|@  .^|"+CC+"::"+BC+"| @ {)|"+CC+"::"+RC+"|   $$|"+CC+"::"+BC+"|  *__|"+CC+"::"+RC+"|__JJ[|"+CC
    for S in SU
      if S == "V" or S == "+" then C = RC
      if S == "^" or S == "&" then C = BC
      for N in range(1,13)
        if N == 1 and S == "V" then Deck[i] = C+" _____ "+CC+"::"+C+"|A_ _ |"+CC+"::"+C+"|( v )|"+CC+"::"+C+"| \ / |"+CC+"::"+C+"|  .  |"+CC+"::"+C+"|____V|"+CC
        if N == 1 and S == "^" then Deck[i] = C+" _____ "+CC+"::"+C+"|A .  |"+CC+"::"+C+"| /.\ |"+CC+"::"+C+"|(_._)|"+CC+"::"+C+"|  |  |"+CC+"::"+C+"|____V|"+CC
        if N == 1 and S == "+" then Deck[i] = C+" _____ "+CC+"::"+C+"|A ^  |"+CC+"::"+C+"| / \ |"+CC+"::"+C+"| \ / |"+CC+"::"+C+"|  .  |"+CC+"::"+C+"|____V|"+CC
        if N == 1 and S == "&" then Deck[i] = C+" _____ "+CC+"::"+C+"|A _  |"+CC+"::"+C+"| ( ) |"+CC+"::"+C+"|(_'_)|"+CC+"::"+C+"|  |  |"+CC+"::"+C+"|____V|"+CC
        if N == 2 then Deck[i] = C+" _____ "+CC+"::"+C+"|2    |"+CC+"::"+C+"|  "+S+"  |"+CC+"::"+C+"|     |"+CC+"::"+C+"|  "+S+"  |"+CC+"::"+C+"|____Z|"+CC
        if N == 3 then Deck[i] = C+" _____ "+CC+"::"+C+"|3    |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|     |"+CC+"::"+C+"|  "+S+"  |"+CC+"::"+C+"|____E|"+CC
        if N == 4 then Deck[i] = C+" _____ "+CC+"::"+C+"|4    |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|     |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|____h|"+CC
        if N == 5 then Deck[i] = C+" _____ "+CC+"::"+C+"|5    |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|  "+S+"  |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|____S|"+CC
        if N == 6 then Deck[i] = C+" _____ "+CC+"::"+C+"|6    |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|____9|"+CC
        if N == 7 then Deck[i] = C+" _____ "+CC+"::"+C+"|7    |"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|____L|"+CC
        if N == 8 then Deck[i] = C+" _____ "+CC+"::"+C+"|8    |"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"| "+S+" "+S+" |"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|____8|"+CC
        if N == 9 then Deck[i] = C+" _____ "+CC+"::"+C+"|9    |"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|____6|"+CC
        if N == 10 then Deck[i] = C+" _____ "+CC+"::"+C+"|10 "+S+" |"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|"+S+" "+S+" "+S+"|"+CC+"::"+C+"|___0I|"+CC
        if N == 11 then Deck[i] = C+" _____ "+CC+"::"+C+"|J  ww|"+CC+"::"+C+"| "+S+" {)|"+CC+"::"+C+"|   % |"+CC+"::"+C+"|   % |"+CC+"::"+C+"|__%%[|"+CC
        if N == 12 then Deck[i] = C+" _____ "+CC+"::"+C+"|Q  ww|"+CC+"::"+C+"| "+S+" {(|"+CC+"::"+C+"|   %%|"+CC+"::"+C+"|  %%%|"+CC+"::"+C+"|_%%%O|"+CC
        if N == 13 then Deck[i] = C+" _____ "+CC+"::"+C+"|K  WW|"+CC+"::"+C+"| "+S+" {)|"+CC+"::"+C+"|   %%|"+CC+"::"+C+"|  %%%|"+CC+"::"+C+"|_%%%>|"+CC
        i = i+1
      end for
    end for
    // END 3nigma DECK  ////////////////
  
    // START display ///
    send_display = function(cards)
      cards = cards.split(",")
      cards.pull
      line = range(0,5)
      display = range(0,5)
      for e in line
        for card in cards
          //if card == "0" then continue
          cardf = Deck[card.val].split("::")
          if display[e] == e then
            display[e] = cardf[e]
          else
            display[e] = display[e] + " " + cardf[e]
          end if
        end for
      end for
      for l in display
        print(l)
      end for
    end function
    // END display ////
  
    // END client services ///  split here!
  
    // START server ///
    // START DECK ////////////////////////
    deck = {}
    suits = ["hearts","spades","diamonds","clubs"]
    trumps = ["jack","queen","king"]
    deck[0] = {"joker":"joker"}
    i = 1
    for s in suits
      if i == 1 or i == 14 or i == 27 or i == 40 then
        deck[i] = {"ace":s}
        i =  i + 1
      end if
      for r in range(2,10)
        deck[i] = {r:s}
        i = i + 1
      end for
      for t in trumps
        deck[i] = {t:s}
        i = i + 1
      end for
    end for
    //END DECK ////////////////////////
  
  
    //for c in deck
    //	print(c.value)
    //end for
    print("Shuffling...")
    deck.shuffle
    //for c in deck
    //	print(c.value)
    //end for
    print("Shuffling...")
    deck.shuffle
    //for c in deck
    //	print(c.value)
    //end for
  
    player = {}
    player.balance = 100
    player.bet = 0
    player.hand = []
    player.total = 0
    player.has_ace = 0
  
    player.purge = function ()
      flush = self.hand.len
      for c in range(0, flush)
        self.hand.pop
      end for
      self.has_ace = 0
      self.total = 0
    end function
  
    player.calculate = function()
      //print(dealer.hand)
      total = 0
      player.has_ace = 0
      hand = player.hand
      for card in hand
        card = card.indexes
        card = card.pull
        //print(card)
        if card == "joker" then
          //player.hand.pull
          //player.hand.pull
          return 21
        end if
        if card == "ace" then
          total = total + 11
          player.has_ace = player.has_ace + 1
        else
          if card == "jack" or card == "queen" or card == "king" then
            total = total + 10
          else
            total = total + card
          end if
          //print(total)
        end if
      end for
      //print(total)
      if total < 1 then return("Stack error!")
      return total
    end function
  
    player.hit = function()
      if player.total == 21 then return false
      if player.total > 21 then
        if player.has_ace then
          while player.has_ace
            player.total = player.total - 10
            player.has_ace = player.has_ace - 1
          end while
          print("total: " + player.total + " (ace used)")
        else
          print(CLB+"player busts at: "+C+player.total)
          return false
        end if
      end if
      if player.total >= 21 then return false
      hit = user_input("[hit/stay/double]:> ")
      if hit == "hit" then
        return true
      end if
      if hit == "stay" or hit == "0" then
        print(CLB+"player stays at: "+C+player.total)
        wait(.5)
        return false
      end if
      if hit == "double" then
        player.bet = player.bet + player.bet
        return 2
      end if
      return true
    end function
  
    player.show_hand = function()
      hnd = player.hand
      c2 = "0"
      for c in hnd
        v = c.indexes
        v = v.pull
        s = c.values
        s = s.pull
        if v == "ace" then v = 1
        if v == "jack" then v = 11
        if v == "queen" then v = 12
        if v == "king" then v = 13
        if v > 0 then v = v
        //print(s)
        if s == "hearts" then s = 0
        if s == "spades" then s = 13
        if s == "diamonds" then s = 26
        if s == "clubs" then s = 39
        //print("v:"+v+" s:"+s)
        c1 = v + s
        c2 = c2 +","+ c1
      end for
  
      //print("debug: "+c2)
      //localhost.launch(localmachine.current_path+"/3deck", c2)
      send_display(c2)
      //player.hand.pull
      //player.hand.pull
    end function
  
    dealer = {}
    dealer.hand = []
    dealer.total = 0
    dealer.has_ace = 0
  
    dealer.purge = function ()
      flush = self.hand.len
      for c in range(0, flush)
        self.hand.pop
      end for
      self.has_ace = 0
      self.total = 0
    end function
  
    dealer.calculate = function()
      //print(dealer.hand)
      total = 0
      dealer.has_ace = 0
      hand = dealer.hand
      for card in hand
        card = card.indexes
        card = card.pull
        //print(card)
        if card == "joker" then
          //dealer.hand.pull
          //dealer.hand.pull
          return 21
        end if
        if card == "ace" then
          total = total + 11
          dealer.has_ace = dealer.has_ace + 1
        else
          if card == "jack" or card == "queen" or card == "king" then
            total = total + 10
          else
            total = total + card
          end if
          //print(total)
        end if
      end for
      //dealer.hand.pull
      //dealer.hand.pull
      //print(total)
      if total < 1 then return("Stack error!")
      return total
    end function
  
    dealer.hit = function()
      if dealer.total == 21 then return false
    //	if dealer.total > 21 then
    //		while dealer.has_ace
    //			dealer.total = dealer.total - 10
    //			dealer.has_ace = dealer.has_ace - 1
    //		end while
    //	end if
      if dealer.total >= 16 then
        while (dealer.has_ace and dealer.total >= 16)
          dealer.total = dealer.total - 10
          dealer.has_ace = dealer.has_ace - 1
        end while
        if dealer.total >= 16 then return false
      end if
      return true
    end function
  
    dealer.show_hand = function()
      hnd = dealer.hand
      c2 = "0"
      for c in hnd
        v = c.indexes
        v = v.pull
        s = c.values
        s = s.pull
        if v == "ace" then v = 1
        if v == "jack" then v = 11
        if v == "queen" then v = 12
        if v == "king" then v = 13
        if v > 0 then v = v
        //print(s)
        if s == "hearts" then s = 0
        if s == "spades" then s = 13
        if s == "diamonds" then s = 26
        if s == "clubs" then s = 39
        //print("v:"+v+" s:"+s)
        c1 = v + s
        c2 = c2 +","+ c1
      end for
  
        //print("debug: "+c2)
      //localhost.launch(localmachine.current_path+"/3deck", c2)
      send_display(c2)
    end function
  
  
    deal = function(pass_deck)
      i=1
      pd = pass_deck
      print("Shuffling...")
      pd.shuffle
      print("Dealing...")
      wait(.5)
      clear_screen
      dealer.hand.push(pd[i])
      dealer.hand.push(pd[i+1])
      dealer.show_hand
      dealer.total = dealer.calculate
      print(CW+"dealer: " +C+ dealer.total + " " + pd[i] + " | " + pd[i+1])
      i = i + 2
      print(GC+"-------------------------------------------"+C)
      player.hand.push(pd[i])
      player.hand.push(pd[i+1])
      player.total = player.calculate
      print(CLB+"player: " +C+ player.total + " " + pd[i] + " | " + pd[i+1])
      player.show_hand
      i = i + 2
      print
      if player.total == 21 then return 3
      hitting = true
      while hitting
        hitting = player.hit
        if hitting then
          if hitting == 2 then
            hitting = false
            print(CLB+"player doubles: "+C)
            wait(.5)
          else
            print(CLB+"player hits: "+C)
            wait(.5)
          end if
          player.hand.push(pd[i])
          player.total = player.calculate
          clear_screen
          dealer.show_hand
          print(CW+"dealer: " +C+ dealer.total)
          print(GC+"-------------------------------------------"+C)
          print(CLB+"player: " +C+ player.total)
          player.show_hand
          i = i + 1
        end if
      end while
  
      if player.total > 21 then return false
      print(GC+"-------------------------------------------"+C)
      hitting = true
      while hitting
        hitting = dealer.hit
        if hitting then
          dealer.hand.push(pd[i])
          dealer.total = dealer.calculate
          clear_screen
          print(CW+"dealer hits: "+C)
          dealer.show_hand
          print(CW+"dealer: " +C+ dealer.total)
          print(GC+"-------------------------------------------"+C)
          print(CLB+"player: " +C+ player.total)
          player.show_hand
  
          wait(.5)
          i = i + 1
        else
          print(char(10)+CW+"dealer stays at: " +C+ dealer.total)
          wait(.5)
        end if
      end while
  
      if dealer.total > 21 then
        print("dealer<b> busts</b>.")
        return true
      end if
      outcome = null
      if dealer.total > player.total then
        outcome = false
      else
        if dealer.total ==  player.total then
          outcome = 2
        else
          outcome = true
        end if
      end if
      return(outcome)
    end function
  
    blackjack = function(game_deck)
      d = game_deck
      playing = true  // this never gets set to false
      while playing
        d.shuffle
        if player.balance < 0 then
          print("Oh No! You owe the mob money! Run for your life!")
          wait(2)
          return("You didn't get away! Your legs are broken, encased in cement and you are tossed in the river.\nGame over!")
        end if
        if player.balance < 1 then return("You're broke! You have no more bucks to give.\nGame over!")  // exit condition 1
        print
        bet = user_input("Place yer bet! [balance: <b>" + player.balance + "</b>]\n  ")
        if bet == "q" or bet == "Q" or bet == "quit" or bet == "exit" then break  // exit condition 2
        if bet.val > 0 and bet.val <= player.balance then
          print("Bet of <b>"+bet.val+"</b> bucks placed.")
          player.bet = bet.val
          result = deal(d)
          dealer.purge
          player.purge
          if result then
            if result == 2 then
              print("<b>Push!</b>\n [balance unchanged]")
            else
              if result == 3 then
                print("Blackjack! Paying time-and-a-half. [<b>" + floor(player.bet * 1.5) + " </b>bucks credited to balance]")
                player.balance = player.balance + floor(player.bet * 1.5)
              else
                print("<b>You win!</b>\n [<b>" + player.bet + " </b>bucks credited to balance]")
                player.balance = player.balance + player.bet
              end if
            end if
          else
            print("<b>You lose!</b>\n [<b>" + player.bet + " </b>bucks debited from balance]")
            player.balance = player.balance - player.bet
          end if
        else
          print("Bet must be between 1 and "+player.balance+" or [q]uit.")
        end if
      end while
    end function
  
    return blackjack(deck)
  end function
 
  ///////////////////////////////////////DRUGWARS//////////////
  ////////////////////////////////////////////////////////////
  g3 = function()
      // drug wars v 0.2 by Plu70
      //
      //
      //
  
      // game time constants
      globals.TIMELIMIT = 31
      globals.GAMETIME  =  0
      globals.GOAL = "1337331"
      
      // class player
      PLAYER = {} 
      PLAYER.location=""
      PLAYER.inventory_size=100
      //PLAYER.inventory_contents=[]
      PLAYER.heat=0
      PLAYER.event_status=""
      
      //////////////// GRAPHICS /////////////////
      
      colorCyan = "<color=#00FFFF><b>"
      CT = "</b></color>"
      
      logo = ["D","R","U","G","W","A","R","S"]
      
      officerHardassSprite = "
                            _______________
                            \      __      /         __
                             \_____()_____/         /  )
                             '============`        /  /
                              #---\  /---#        /  /
                             (# @\| |/@  #)      /  /
                              \   (_)   /       /  /
                              |\ '---` /|      /  /
                      _______/ \\_____// \____/ o_|
                     /       \  /     \  /   / o_|
                    /|           o|        / o_| \
                   / |  _____     |       / /   \ \
                  /  |  |===|    o|      / /\    \ \
                 |   |   \@/      |     / /  \    \ \
                 |   |___________o|__/----)   \    \/
                 |   '              ||  --)    \     |
                 |__________________||  --)     \    /
                     |           o|   ''''   |   \__/
                     |            |          |
                       ""Officer Hardass"" Img by Rosebud"
      
      
                                              
      deaSprite = "
         Art by Joan G. Stark
                 _.---._
              .-' ((O)) '-.
               \ _.\_/._ /
                /..___..\
                ;-.___.-;
               (| e ) e |)     .;.
                \  /_   /      ||||
                _\__-__/_    (\|'-|
              /` / \V/ \ `\   \ )/
             /   \  Y  /   \  /=/
            /  |  \ | / {}  \/ /
           /  /|   `|'   |\   /
           \  \|    |.   | \_/
            \ /\    |.   |
             \_/\   |.   |
             /)_/   |    |
            // ',__.'.__,'
           //   |   |   |
          //    |   |   |
         (/     |   |   |
                |   |   |
                | _ | _ |
                |   |   |
                |   |   |
                |   |   |
          jgs   |___|___|
                /  J L  \
               (__/   \__)"
      
      
                      fbiSprite = "
                      FBI
                              _ _.-'`-._ _
                              ;.'________'.;
                  _________n.[____________].n_________
                  |''_''_''_''||==||==||==||''_''_''_'']
                  |'''''''''''||..||..||..||'''''''''''|
                  |LI LI LI LI||LI||LI||LI||LI LI LI LI|
                  |.. .. .. ..||..||..||..||.. .. .. ..|
                  |LI LI LI LI||LI||LI||LI||LI LI LI LI|
              ,,;;,;;;,;;;,;;;,;;;,;;;,;;;,;;,;;;,;;;,;;,,
              ;;jgs;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      "
      
      
      
                      elGuapoSprite = "
                      .------\ /------.
                      |       -       |
                      |               |
                      |               |
                      |               |
                   _______________________
                   ===========.===========
                     / ~~~~~     ~~~~~ \
                    /|     |     |\
                    W   ---  / \  ---   W
                    \.      |o o|      ./
                     |                 |
                     \    #########    /
                      \  ## ----- ##  /
                       \##         ##/
                        \_____v_____/"
      
      
              rabbitSprite = "
                       ____...                                  
                .-'--''''.__    `.                                
               |            `    |                                
      (         `._....------.._.:          
      )         .()''        ``().                                
      '          () .=='  `===  `-.         
      . )       (         g)                                
      )         )     /        J          
      (          |.   /      . (                                  
      $$         (.  (_'.   , )|`                                 
      ||         |\`-....--'/  ' \                                
      /||.         \\ | | | /  /   \.                              
      //||(\         \`-===-'  '     \o.                            
      .//7' |)         `. --   / (     OObaaaad888b.                 
      (<<. / |     .a888b`.__.'d\     OO888888888888a.               
      \  Y' |    .8888888aaaa88POOOOOO888888888888888.              
      \  \ |   .888888888888888888888888888888888888b              
      |   |  .d88888P88888888888888888888888b8888888.             
      b.--d .d88888P8888888888888888a:f888888|888888b             
      88888b 888888|8888888888888888888888888\8888888"
      
      
      
      downTownSprite = "
              __   __                     ___      _
             |  | |  |      /|           |   |   _/ \_
             |  | |  |  _  | |__         |   |_-/     \-_     _
           __|  | |  |_| | | |  |/\_     |   |  \     /  |___|
          |  |  | |  | | __| |  |   |_   |   |   |___|   |   |
          |  |  |^|  | ||  | |  |   | |__|   |   |   |   |   |
          |  |  |||  | ||  | |  |   | /\ |   |   |   |   |   |
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~/  \~~~~~~~~~~~~~~~~~~~~~~~
         ~ ~~  ~ ~~ ~~~ ~ ~ ~~ ~~ ~~ \   \__   ~  ~  ~~~~ ~~~ ~~
       ~~ ~ ~ ~~~ ~~  ~~ ~~~~~~~~~~ ~ \   \o\  ~~ ~ ~~~~ ~ ~ ~~~
         ~ ~~~~~~~~ ~ ~ ~~ ~ ~ ~ ~ ~~~ \   \o\=   ~~ ~~  ~~ ~ ~~
      ~ ~ ~ ~~~~~~~ ~  ~~ ~~ ~ ~~ ~ ~ ~~ ~ ~ ~~ ~~~ ~ ~ ~ ~ ~~~~"
      
      
      villaSprite = "
                             X_x
                            / \\\
                            |n| |
                          )(|_|-'X
                         /  \\Y// \
                         |A | | |A|
                         |  | | |_|
                  )(__X,,|__|MEB;;;-,)(,
                 /  \\\;;;;;;;;;;;;/    \
                 |A | |            | U  |
               )_|  | |____)-----( |    |
              ///|__|-'////       \|___)=(__X
             /////////////         \///   \/ \
             |           |  U    U |//     \u|
             |   )_,-,___|_)=(     | |  U  |_|_X
             |  ///   \\|//   \    | |  __ |/// \
           )_')(//     \Y/     >---)=( /  \|  | |-----------------..,
          //// ,\ u   u |   u /////   \|  ||__|A|----------------.., \,
         |  | .. |      |    ///// ,-, \__||--------------------.., \, \,
      ---'--'_::_|______'----| u | | | |-----------------------.., \, \, \,
                             |___|_|_|_|----------------------.., \, \, \, \,
      -------------------------------------------------------.., \, \, \, \, \
                                                                        \Valkyrie"
      
      
      gcccSprite = "
                                                                |>>>
                         _                      _                |
          ____________ .' '.    _____/----/-\ .' './========\   / \
         //// ////// /V_.-._\  |.-.-.|===| _ |-----| u    u |  /___\
        // /// // ///==\ u |.  || | ||===||||| |T| |   ||   | .| u |_ _ _ _ _ _
       ///////-\////====\==|:::::::::::::::::::::::::::::::::::|u u| U U U U U
       |----/\u |--|++++|..|'''''''''''::::::::::::::''''''''''|+++|+-+-+-+-+-+
       |u u|u | |u ||||||..|              '::::::::'           |===|>=== _ _ ==
       |===|  |u|==|++++|==|              .::::::::.           | T |....| V |..
       |u u|u | |u ||HH||         \|/    .::::::::::.
       |===|_.|u|_.|+HH+|_              .::::::::::::.              _
                      __(_)___         .::::::::::::::.         ___(_)__
      ---------------/  / \  /|       .:::::;;;:::;;:::.       |\  / \  \-------
      ______________/_______/ |      .::::::;;:::::;;:::.      | \_______\________
      |       |     [===  =] /|     .:::::;;;::::::;;;:::.     |\ [==  = ]   |
      |_______|_____[ = == ]/ |    .:::::;;;:::::::;;;::::.    | \[ ===  ]___|____
           |       |[  === ] /|   .:::::;;;::::::::;;;:::::.   |\ [=  ===] |
      _____|_______|[== = =]/ |  .:::::;;;::::::::::;;;:::::.  | \[ ==  =]_|______
       |       |    [ == = ] /| .::::::;;:::::::::::;;;::::::. |\ [== == ]      |
      _|_______|____[=  == ]/ |.::::::;;:::::::::::::;;;::::::.| \[  === ]______|_
         |       |  [ === =] /.::::::;;::::::::::::::;;;:::::::.\ [===  =]   |
      ___|_______|__[ == ==]/.::::::;;;:::::::::::::::;;;:::::::.\[=  == ]___|_____"
      
      shabbyTownSprite = "
                    )
                   (      _[]_         (
           __[]___[]___[]/____\_[]_    )
          /______________|[][]|____\  (
          |[][]|[][]|[][]|[][]|[][]|__[]_
          |  /\|/\  |  /\|  /\|/\  |_____\
          |[]|||||[]|[]|||[]|||||[]|[_]|||
        ===================================
        -  -  -  -  -  -  -  -  -  -  -  -  -
      =========================================   Tom Harvey"
      
      districtSprite = "
                        \  |  /         ___________
         ____________  \ \_# /         |  ___      |       _________
        |            |  \  #/          | |   |     |      | = = = = |
        | |   |   |  |   \\#           | |`v'|     |      |         |
        |            |    \#  //       |  --- ___  |      | |  || | |
        | |   |   |  |     #_//        |     |   | |      |         |
        |            |  \\ #_/_______  |     |   | |      | |  || | |
        | |   |   |  |   \\# /_____/ \ |      ---  |      |         |
        |            |    \# |+ ++|  | |  |~~~~~~| |      | |  || | |
        |            |    \# |+ ++|  | |  |~~~~~~| |      | |  || | |
      ~~|    (~~~~~) |~~~~~#~| H  |_ |~|  | |||| | |~~~~~~|         |
        |    ( ||| ) |     # ~~~~~~    |  | |||| | |      | ||||||| |
        ~~~~~~~~~~~~~________/  /_____ |  | |||| | |      | ||||||| |
                                       ~~~~~~~~~~~~~      | ||||||| |"
      
      
      shadyAcresSprite = "
        ~         ~~          __
             _T      .,,.    ~--~ ^^
       ^^   // \                    ~
            ][O]    ^^      ,-~ ~
         /''-I_I         _II____
      __/_  /   \ ______/ ''   /'\_,__
        | II--'''' \,--:--..,_/,.-{ },
      ; '/__\,.--';|   |[] .-.| O{ _ }
      :' |  | []  -|   ''--:.;[,.'\,/
      '  |[]|,.--'' '',   ''-,.    |
        ..    ..-''    ;       ''. '  Steven Maddison"
      
      lasGreygasSprite = "
                                       .''.
             .''.             *''*    :_\/_:     . 
            :_\/_:   .    .:.*_\/_*   : /\ :  .'.:.'.
        .''.: /\ : _\(/_  ':'* /\ *  : '..'.  -=:o:=-
       :_\/_:'.:::. /)\*''*  .|.* '.\'/.'_\(/_'.':'.'
       : /\ : :::::  '*_\/_* | |  -= o =- /)\    '  *
        '..'  ':::'   * /\ * |'|  .'/.\'.  '._____
            *        __*..* |  |     :      |.   |' .---'|
             _*   .-'   '-. |  |     .--'|  ||   | _|    |
          .-'|  _.|  |    ||   '-__  |   |  |    ||      |
          |' | |.    |    ||       | |   |  |    ||      |
       ___|  '-'     '    ''      '-'   '-.'    '`      |____
      jgs~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      "
      capitolSprite = "
                                   ^
                      _______     ^^^
                     |xxxxxxx|  _^^^^^_
                     |xxxxxxx| | [][]  |
                  ______xxxxx| |[][][] |
                 |++++++|xxxx| | [][][]|      
                 |++++++|xxxx| |[][][] |
                 |++++++|_________ [][]|
                 |++++++|=|=|=|=|=| [] |
                 |++++++|=|=|=|=|=|[][]|
      ___________|++HH++|  _HHHH__|   _________   _________  _________
               _______________   ______________      ______________
      __________________  ___________    __________________    ____________"
      
      
      
      
      /////////////////////////////////////////////
      
      ////// DRUGS /////////
      drug = {}
      drug.price=0
      drug.size=0
      drug.event_status=""
      drug.availability=1
      drug.held=0
      drug.buy = function(amount)  // handles moving inventory. does not handle payment. takes player object, integer
          if typeof(amount) != "number" or amount < 1 or amount > self.availability then return 0
          if player.cash < self.cost * amount then return 0
          if self.size * amount <= player.inventory_size then self.held = self.held + amount else return 0
          player.debit( (self.cost * amount) )
          player.update_inventory( "in", (self.size * amount) )
          self.availability = self.availability - amount
          return 1
      end function 
      drug.sell = function(amount) // handles moving inventroy. does not handle payment. takes player object, integer
          if typeof(amount) != "number" or amount < 1 then return 0
          if self.held >= amount then self.held = self.held - amount else return 0
          player.credit( (self.cost * amount) )
          player.update_inventory("out", self.size * amount)
          self.availability = self.availability + amount
          return 1
      end function
      
      //
      
      cannabis = new drug
      cannabis.name = "cannabis"
      cannabis.price = 100
      cannabis.size = 4
      cannabis.cost = 100
      cannabis.icon = "<color=green><b>_\||/_</b></color>"
      
      mushrooms = new drug
      mushrooms.name = "mushrooms"
      mushrooms.price = 50
      mushrooms.size = 2
      mushrooms.cost = 50
      mushrooms.icon = "<color=white><b>.<color=red>`<color=white>||</color>`</color>.</b></color>"
      
      molly = new drug
      molly.name = "molly"
      molly.price = 20
      molly.size = 1
      molly.cost = 20
      molly.icon = "<color=orange><b>..(o).</b></color>"
      
      cocaine = new drug
      cocaine.name = "cocaine"
      cocaine.price = 500
      cocaine.size = 10
      cocaine.cost = 500
      cocaine.icon = "<color=white><b>.[==].</b></color>"
      
      heroin = new drug
      heroin.name = "heroin"
      heroin.price = 1000
      heroin.size = 20
      heroin.cost = 1000
      heroin.icon = "<color=#272626ff><b>.====.</b></color>"
      
      lean = new drug
      lean.name = "lean"
      lean.price = 300
      lean.size = 4
      lean.cost = 300
      lean.icon = "<color=purple><b>.<u>|~~|</u>.</b></color>"
      
      crack = new drug
      crack.name = "crack"
      crack.price = 200
      crack.size = 5
      crack.cost = 200
      crack.icon = "<b><color=white>.<*<*></b></color>"
      
      acid = new drug
      acid.name = "acid"
      acid.price = 400
      acid.size = 3
      acid.cost = 400
      acid.icon = "<b><color=blue>.{#}..</b></color>"
      _drogas = [cannabis,mushrooms,molly,cocaine,heroin,lean,crack,acid]
      
      //////// END DRUGS /////////
      
      //////// NEIGHBORHOODS /////////
      
      neighborhood = {}
      neighborhood.name=""
      neighborhood.wealth=""
      neighborhood.population=""
      neighborhood.drug_modifiers=""
      neighborhood.event_status=""
      
      downtown = new neighborhood
      downtown.name = "Downtown"
      downtown.wealth = 10000
      downtown.population = 1000
      downtown.drug_modifiers =    {"cannabis":"medium","mushrooms":"medium","molly":"medium","cocaine":"high","heroin":"high","lean":"medium","crack":"medium","acid":"medium"}
      downtown.sprite = downTownSprite
      
      villa = new neighborhood
      villa.name = "Greyton's Villa"
      villa.wealth = 50000
      villa.population = 100
      villa.drug_modifiers =      {"cannabis":"low","mushrooms":"low","molly":"low","cocaine":"high","heroin":"high","lean":"medium","crack":"low","acid":"medium"}
      villa.sprite = villaSprite
      
      gccc = new neighborhood
      gccc.name = "Grey County Community College"
      gccc.wealth = 5000
      gccc.population = 3000
      gccc.drug_modifiers =       {"cannabis":"high","mushrooms":"high","molly":"medium","cocaine":"medium","heroin":"medium","lean":"medium","crack":"medium","acid":"low"}
      gccc.sprite = gcccSprite
      
      shabbytown = new neighborhood
      shabbytown.name = "Shabbytown"
      shabbytown.wealth = 2000
      shabbytown.population = 1000
      shabbytown.drug_modifiers = {"cannabis":"medium","mushrooms":"medium","molly":"medium","cocaine":"low","heroin":"medium","lean":"high","crack":"high","acid":"medium"}
      shabbytown.sprite = shabbyTownSprite
      
      district = new neighborhood
      district.name = "District 108"
      district.wealth = 3500
      district.population = 500
      district.drug_modifiers =  {"cannabis":"low","mushrooms":"medium","molly":"low","cocaine":"medium","heroin":"high","lean":"high","crack":"high","acid":"medium"}
      district.sprite = districtSprite
      
      shady = new neighborhood
      shady.name = "Shady Acres"
      shady.wealth = 8000
      shady.population = 750
      shady.drug_modifiers =    {"cannabis":"high","mushrooms":"low","molly":"high","cocaine":"medium","heroin":"low","lean":"medium","crack":"medium","acid":"medium"}
      shady.sprite = shadyAcresSprite
      
      greygas = new neighborhood
      greygas.name = "Las Greygas"
      greygas.wealth = 10000
      greygas.population = 3000
      greygas.drug_modifiers =  {"cannabis":"low","mushrooms":"high","molly":"high","cocaine":"high","heroin":"low","lean":"low","crack":"medium","acid":"high"}
      greygas.sprite = lasGreygasSprite
      
      capitol = new neighborhood
      capitol.name = "Capitol Heights"
      capitol.wealth = 10000
      capitol.population = 1500
      capitol.drug_modifiers =  {"cannabis":"medium","mushrooms":"medium","molly":"medium","cocaine":"high","heroin":"medium","lean":"low","crack":"medium","acid":"low"}
      capitol.sprite = capitolSprite
      
      _hoods = [ downtown, villa, gccc, shabbytown, district, shady, greygas, capitol ]
      if DEBUG then
          for h in _hoods
              print h.name // debug
          end for
      end if
      /////// END NEIGHBORHOODS ///////
      
      /////// EVENTS ///////////////
      event = {}
      event.names=["Officer_Hardass","The_DEA","The_FBI","El_Guapo","Rabbit"]
      //event.affects = ["player", "drug", "neighborhood"]
      //event.effect = ["price", "availability", "heat","shop"]
      event.Rabbit = function()
          print
          print rabbitSprite
          print
          print "A shadow fellow pulls you into an alley and offers you a deal."
          print "<color=yellow>Wanna buy a trenchcoat for an extra 20 inventory? $1000 cash, bub."
          print
          choice = user_input("[1] or Yes (anything else for no):> ")
          if choice == "1" or choice.lower == "yes" then 
              if player.cash >= 1000 then 
                  print
                  print "<color=yellow>Here you go. Hmm, looks good on you."
                  player.cash = player.cash - 1000
                  player.inventory_size = player.inventory_size + 20
                  player.event_status = "none"
              else 
                  print
                  print "<color=yellow>You don't have the cash, bub!"
              end if
          else 
              print
              print "<color=yellow>A'ight, cool. I know someone else that wants it."
          end if
          return null
      end function 
      event.El_Guapo = function()
          print 
          print elGuapoSprite
          print
          print "El Guapo's narco sub has made berth. "
          print "The market has been flooded with cheap drugs!"
          print "Deals like these won't last long!"
          player.event_status = "none"
          return user_input("press <<b>enter</b>> to continue"+char(10))
      end function 
      event.The_FBI = function()
          print 
          print fbiSprite
          print
          print "The FBI opened an investigation into you! "
          print "They are demanding $"+ceil(player.cash / 10)+" in bribes to avoid jail time!"
          print "You fill a duffel bag with the money and head to the FBI field office."
          print "When you arrive you dump the cash on their doorstep."
          print "You decide to keep the duffelbag. "
          print "Your inventory space has increased by 10!"
          player.cash = ceil(player.cash / 10)
          player.inventory_size = player.inventory_size + 10
          player.event_status = "none"
          return user_input("press <<b>enter</b>> to continue"+char(10))
      end function 
      event.The_DEA = function()
          print 
          print deaSprite
          print
          print "The DEA made a major bust! \nDrug availability has temporarily gone down! \nPrices have permanently gone up!"
          player.event_status = "none"
      
          return user_input("press <<b>enter</b>> to continue"+char(10))
      end function 
      event.Officer_Hardass = function()
      
          print 
          print officerHardassSprite
          print
          print "Officer Hardass caught you slinging dope and beat your ass! "+char(10)+"He took all your drugs and you had to bribe him with $"+ceil(player.cash / 10)+" to avoid jail time."
          print "Barely able to stand, you wonder if you will survive another day."
          player.cash = player.cash - ceil(player.cash / 10)
          for d in _drogas 
              a = d.held
              d.sell(a)
              player.debit(d.cost * a)
          end for
          player.event_status = "none"
          return user_input("press <<b>enter</b>> to continue"+char(10))
      end function 
      ////// END EVENTS //////////
      
      // win condition
      _score = function()
          if player.cash >= GOAL.to_int then return("You win! :]") else return("You lose. :[")
          return null
      end function
      
      // each time the player moves we tick the clock up one.
      _game_time_update = function()
          globals.GAMETIME = GAMETIME + 1
          status = null
          if GAMETIME >= TIMELIMIT then status = (_score)
          if DEBUG then print "debug: tick"
          if DEBUG then print "debug: gametime: "+GAMETIME
          player.event_status = "none"
          if event.names.len > 0 then
              ev = range(0,9)
              ev.shuffle 
              e = ev.pop 
              event.names.shuffle   
              if DEBUG then 
                  player.event_status = event.names.pop 
              else 
                  if e > 7 then player.event_status = event.names.pop // 20% chance
              end if
              if player.event_status == "Rabbit" then event.names.push("Rabbit") // make sure there's always a chance to up capacity
          end if 
          return status
      end function 
      
      // drug price and availability based on popularity and population
      _update_drug_prices = function(locale)
          price = {}
          price.low = [1,1.5,2,2.5,3]
          price.medium = [3.5,4,5,6,4]
          price.high = [6.5,7,8,9,2]
      
          for d in _drogas 
              // modify prices
              r = [0,1,2,3,4]
              r.shuffle 
              if DEBUG then print "debug: "+d.name+char(10)+"debug: "+locale.name
              mod = price[locale.drug_modifiers[d.name]][r[0]]
              d.cost = d.price * mod
              d.availability = ceil(locale.population / mod)
              if player.event_status == "El_Guapo" then 
                  d.availability = d.availability * 2
                  d.cost = ceil(d.cost / 1.5)
              end if
              if player.event_status == "The_DEA" then 
                  d.price = d.price + (d.price / 10)
                  d.availability = ceil(d.availability / 2)
                  d.cost = ceil(d.cost * 1.5)
              end if 
              if DEBUG then print "debug: cost: "+ d.cost
              if DEBUG then print "debug: avail: "+ d.availability
          end for 
      end function
      
      ///////////////////////////////////////
      //////// PLAYER ONE /////////
      
      player = new PLAYER 
      player.location = downtown // player starts here
      player.inventory_size=100
      //player.inventory_contents=[]
      player.heat=0
      player.event_status="none"
      player.cash = 100
      //
      player.update_location = function(moveto) // expects neighborhood object
          if DEBUG then print "debug: moveto: "+moveto.name // debug
          if self.location != moveto then self.location = moveto else return 0
          stat = _game_time_update
          _update_drug_prices(self.location)
          if player.event_status != "none" then event[player.event_status]
          return 1
      end function
      //
      player.debit = function( amount )
          if typeof(amount) != "number" or amount > player.cash or amount < 1 then return 0
          self.cash = self.cash - amount 
          return 1
      end function 
      player.credit = function( amount )
          if typeof(amount) != "number" or amount < 1 then return 0
          self.cash = self.cash + amount 
          return 1
      end function
      //
      player.update_inventory = function( direction, amount )
          if direction == "in" then self.inventory_size = self.inventory_size - amount
          if direction == "out" then self.inventory_size = self.inventory_size + amount 
          return null
      end function
      //player.property = ["none"]
      //player.net worth = 100
      //////////////////////////////////////
      
      move_menu = function(pr)
          print "current location: "+pr.location.name
          for h in _hoods
              //print h
              print "[<b>"+_hoods.indexOf(h)+"</b>] - "+h.name
          end for 
          choice = user_input("Move to :> ").to_int// int
          if choice == "" then return pr.location
          if DEBUG then print "debug: choice: "+choice
          if typeof(choice) == "number" and choice >= 0 and choice < _hoods.len then return _hoods[choice] else return pr.location // if we didn't move, return current location
      end function 
      
      drug_menu = function()
          print // something
          buf = []
          for d in _drogas
              buf.push("[<b>"+_drogas.indexOf(d)+"</b>] - "+d.name+" $"+d.cost+" "+d.availability+" units available, "+d.held+"/"+ ( floor( player.inventory_size / d.size ) + d.held ) + " units held "+d.icon )
          end for 
          print format_columns(buf.join(char(10)))
          choice = user_input(":> ")
          if choice == "" then return 
          if typeof(choice.to_int) == "number" and choice.to_int >= 0 and choice.to_int < _drogas.len and _drogas.hasIndex(choice.to_int) then return _drogas[choice.to_int] else print "Invalid selection."
          return 0
      end function 
      
      
      playing = true
      
      // game loop
      while playing == true
          if not DEBUG then clear_screen
          print    
          print player.location.sprite
          print
          // show location
          print "<u><color=#40865bff>Location: <b>"+player.location.name+"</b></u> <u>Days Left: <b>"+ (31 - GAMETIME)
          // show inventory
          print "<u><color=#40865bff>Inventory: <b>"+player.inventory_size+"</b> pocket space available."
          d_b = []
          print "- - - - - - - - - - - - - - - - - - - -"
          for d in _drogas
              d_b.push(  "<u><color=#40865bff>"+d.name.upper+" |"+colorCyan+d.held+CT+"|</u> <color=red>"+logo.pull+"</color> ["+d.icon+"]" )
          end for
          print format_columns(d_b.join(char(10)))
      
          // show cash
          print 
          print "<color=#40865bff>Cash: <color=yellow><b>$"+player.cash+"</color> Goal: >= <color=yellow>"+GOAL
          print
      
          // show prompt
          if player.event_status != "none" then print "[<color=yellow>E</color>] - "+player.event_status
          print "[<color=white>1</color>] - Buy [<color=white>2</color>] - Sell [<color=white>3</color>] - Move [<color=white>q</color>] - quit"
      
          // handle choices
          choice = user_input(":> ")
      
          // quit
          if choice == "q" then return "goodbye"
      
          // handle [rabbit] event
          if choice.lower == "e" and player.event_status != "none" then 
              event[player.event_status]
              user_input("press <<b>enter</b>> to continue")
              continue
          end if
      
          // -- buy drugs
          if choice == "1" then 
              drug_to_buy = drug_menu
              if drug_to_buy then print "Buying "+drug_to_buy.name else continue
              if drug_to_buy.buy(user_input("Amount :> ").to_int) then print "Success." else print "Failed."
              user_input("press <<b>enter</b>> to continue")
              continue
          end if
      
          // -- sell drugs
          if choice == "2" then 
              drug_to_sell = drug_menu
              if drug_to_sell then print "Selling "+drug_to_sell.name else continue
              if drug_to_sell.sell(user_input("Amount :> ").to_int) then print "Success." else print "Failed."
              user_input("press <<b>enter</b>> to continue")
              continue
          end if
      
          // -- move location // update prices, availability and location
          if choice == "3" then
              move = player.update_location(move_menu(player))
              if move == 1 then print "Travelling..." 
              if move == 0 then print "Staying put."
              if typeof(move) == "string" then return move // game over win/lose
              user_input("press <<b>enter</b>> to continue")
              continue
          end if
      
          // repeat until timelimit
          // exit with score
      end while
  end function
  
 //////////////////////contrubutions start here///////////
  /// this is stuff that was not made entirely by Plu70
  /// most of this will contain additions or adjustments by Plu70
  //// cotributed commands ////////////////////
  command.pwgen = function(arg1, arg2=0, arg3=0, arg4=0)
	if arg1 == "help" or arg1 == "-h" then return "pwgen: generate a friggin lot of passwords with hashes."+char(10)+"Usage: pwgen -- generate ~/rkit/tables/tp/ and files with one password per line"+char(10)+"Usage: pwgen hash -- generate ~/rkit/tables/t5 and files with hash=pw one per line"+char(10)+"Use cerebrum to expand onboard dictionary."+char(10)+"NOTE: the tables folder does not need to be in rkit to be used"+char(10)+"-- including it in rkit allows you to upload it with rkit to targets"+char(10)+"---- move it to a different folder if this is not desired behavior"

	// pwgen v0.4 by usespython, modifications by Plu70
	PASSWORDSB="belagio,balencia,ibiza,3k4l23ll,4567adee,bees,Bee123,hobo,heebeejeebee,geronimo69,Es1,day,abcd,abc1,baby,mayday,today,yesterday,fifteen,abgDw32fhGu58k,69696969,sfuzzer,111,1111,222,2222,3333,333,00000,000,4444,444,5555,555,55555555,4fb426abgDw32fHG,666,6666,thx1138,7777,777,8888,888,9999,999,0000,oicu812,1337,8008,4hpu79htgbr,80085,007007,43110,69696969,t23t49k21af3,evkfdhgbv78ery,6h057,h4ck,h4ckg4m3,g01ng,p0st4l,g01ngp0st4l,81rd,7074g,35sk1m0,pr0n,n00b,nu8,suxor,hazorz,5uxzorz,owned,pwnd,0wnd,p0wn3d,w00t,woo7,woot,w007,10100111001,teh,meh,lol,brb,afk,wyd,gtfo,lmao,lmfao,gitgud,lawl,troll,bawl,epic,54321,987654321,88888888,555555,1234567890,1973,147147,151515,1515,101010,202020,21122112,12341234,74lk,dir7y,53nP4I,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,1,2,3,4,5,6,7,8,9,0,le375p34k,420420,11111111,112233,h4f4jf53fk74,123abc,1234qwer,123321,5y4hpu79htgbrub,ncc1701e,7777777,51505150,000000,5150,222222,999999,252525,77777777,98765432,poop,polyamorous,zelda,password,6gtr43,123456,12345678,1234,qwerty,12345,dragon,baseball,football,letmein,monkey,696969,abc123,mustang,michael,shadow,master,jennifer,111111,2000,jordan,superman,harley,1234567,hunter,trustno1,ranger,buster,thomas,tigger,robert,soccer,batman,test,pass,hockey,george,charlie,andrew,michelle,love,sunshine,jessica,6969,pepper,daniel,access,123456789,654321,joshua,maggie,starwars,silver,william,dallas,yankees,123123,ashley,666666,hello,amanda,orange,biteme,freedom,computer,sexy,thunder,nicole,ginger,heather,hammer,summer,corvette,taylor,swift,austin,1111,merlin,matthew,121212,golfer,cheese,princess,martin,chelsea,patrick,richard,diamond,yellow,bigdog,secret,asdfgh,sparky,cowboy,camaro,anthony,matrix,falcon,iloveyou,bailey,guitar,jackson,purple,scooter,phoenix,aaaaaa,morgan,tigers,porsche,mickey,maverick,cookie,nascar,peanut,justin,131313,money,horny,samantha,panties,steelers,joseph,snoopy,boomer,whatever,iceman,smokey,gateway,dakota,cowboys,eagles,chicken,black,zxcvbn,please,pharoa,andrea,ferrari,knight,hardcore,porn,ass,love,sex,hooker,blow,coke,melissa,compaq,coffee,booboo,bitch,johnny,bulldog,xxxxxx,welcome,james,player,ncc1701,wizard,scooby,charles,junior,internet,mike,brandy,tennis,banana,monster,spider,lakers,miller,rabbit,enter,mercedes,brandon,steven,fender,john,yamaha,diablo,chris,boston,tiger,marine,chicago,rangers,gandalf,winter,bigtits,barney,edward,raiders,porn,badboy,blowme,spanky,bigdaddy,johnson,chester,london,midnight,blue,fishing,hannah,slayer,rachel,sexsex,redsox,asdf,marlboro,panther,zxcvbnm,arsenal,oliver,qazwsx,mother,victoria,jasper,angel,david,winner,crystal,golden,butthead,viking,jack,iwantu,shannon,murphy,angels,prince,cameron,girls,madison,wilson,carlos,hooters,willie,startrek,captain,maddog,jasmine,butter,booger,angela,golf,lauren,rocket,tiffany,theman,dennis,liverpoo,flower,forever,green,jackie,muffin,turtle,sophie,danielle,redskins,toyota,jason,sierra,winston,debbie,giants,packers,newyork,jeremy,casper,bubba,dracula,sandra,lovers,mountain,united,cooper,driver,tucker,helpme,pookie,lucky,maxwell,8675309,bear,suckit,gators,shithead,jaguar,monica,fred,happy,hotdog,tits,gemini,lover,xxxxxxxx,777777,canada,nathan,victor,florida,nicholas,rosebud,metallic,doctor,trouble,success,stupid,tomcat,warrior,peaches,apples,fish,qwertyui,magic,buddy,dolphins,rainbow,gunner,987654,freddy,alexis,braves,2112,1212,xavier,dolphin,testing,bond007,member,calvin,voodoo,7777,samson,alex,apollo,fire,tester,chess,walter,beavis,voyager,peter,porno,bonnie,rush2112,beer,apple,scorpio,jonathan,skippy,sydney,scott,red123,power,gordon,travis,beaver,star,flyers,232323,zzzzzz,steve,rebecca,scorpion,doggie,legend,ou812,yankee,blazer,bill,runner,birdie,bitches,parker,topgun,asdfasdf,heaven,viper,animal,bigboy,arthur,baby,private,godzilla,donald,williams,lifehack,phantom,dave,rock,august,sammy,cool,brian,platinum,jake,bronco,paul,mark,frank,heka6w2,copper,billy,cumshot,garfield,willow,cunt,little,carter,slut,albert,kitten,super,jordan23,eagle1,shelby,america,11111,jessie,house,free,chevy,bullshit,white,broncos,horney,surfer,nissan,saturn,airborne,elephant,marvin,shit,action,adidas,qwert,kevin,1313,explorer,walker,police,christin,december,benjamin,wolf,sweet,therock,king,online,brooklyn,teresa,cricket,sharon,dexter,racing,penis,gregory,0000,teens,redwings,dreams,michigan,hentai,magnum,87654321,nothing,donkey,trinity,digital,333333,ramsesii,stella,cartman,guinness,speedy,buffalo,kitty,pimpin,eagle,einstein,kelly,nelson,nirvana,vampire,xxxx,playboy,louise,pumpkin,snowball,test123,girl,sucker,mexico,beatles,fantasy,ford,gibson,celtic,marcus,cherry,cassie,888888,natasha,sniper,chance,genesis,hotrod,reddog,alexande,college,jester,passw0rd,smith,lasvegas,carmen,slipknot,death,kimberly,1q2w3e,eclipse,1q2w3e4r,stanley,samuel,drummer,homer,montana,music,aaaa,spencer,jimmy,carolina,colorado,creative,hello1,rocky,goober,friday,AceofSpades,bollocks,scotty,abcdef,bubbles,hawaii,asakista,fluffy,mine,stephen,horses,thumper,darkness,asdfghjk,pamela,boobies,buddha,vanessa,sandman,naughty,douglas,honda,matt,azerty,6666,shorty,money1,beach,loveme,4321,simple,poohbear,444444,badass,destiny,sarah,denise,vikings,lizard,melanie,assman,sabrina,nintendo,water,good,howard,time,123qwe,november,xxxxx,october,zxcv,shamrock,atlantis,warren,wordpass,julian,mariah,rommel,1010,harris,predator,sylvia,massive,cats,sammy1,mister,stud,marathon,rubber,ding,trunks,desire,montreal,justme,faster,kathleen,irish,1999,bertha,jessica1,alpine,sammie,diamonds,tristan,swinger,shan,stallion,pitbull,letmein2,roberto,ready,april,palmer,ming,shadow1,audrey,chong,clitoris,wang,shirley,jackoff,bluesky,sundance,renegade,hollywoo,bernard,wolfman,soldier,picture,pierre,ling,goddess,manager,nikita,76hj93DB3wsa2,sweety,titans,hang,fang,ficken,niners,bottom,bubble,hello123,ibanez,webster,sweetpea,stocking,freeman,french,mongoose,speed,dddddd,hong,henry,hungry,yang,catdog,cheng,ghost,gogogo,randy,tottenha,curious,butterfl,mission,january,singer,sherman,shark,techno,lancer,lalala,autumn,chichi,orion,trixie,clifford,delta,bobbob,bomber,holden,kang,kiss,1968,spunky,liquid,mary,beagle,granny,network,bond,kkkkkk,millie,biggie,beetle,teacher,susan,toronto,anakin,genius,dream,dang,bush,nyx".split(",")
	PASSWORDSA="operator,1966,966235,feral,323232,blonde,lond,osint,msfconsole,Bd5gHie89YA,tornado,lindsey,content,bruce,buck,aragorn,griffin,chen,campbell,trojan,christop,newman,wayne,tina,rockstar,father,geronimo,pascal,crimson,brooks,hector,penny,anna,camera,chandler,fatcat,lovelove,cody,cunts,waters,stimpy,finger,cindy,wheels,viper1,latin,robin,greenday,creampie,brendan,hiphop,willy,snapper,funtime,duck,trombone,adult,cotton,cookies,kaiser,mulder,westham,latino,jeep,ravens,aurora,drizzt,madness,hermit,energy,kinky,314159,leather,bastard,young,,extreme,hard,password1,vincent,lacrosse,hotmail,spooky,amateur,alaska,badger,paradise,maryjane,soup,crazy,mozart,video,russell,vagina,spitfire,anderson,norman,otaku,eric,cherokee,cougar,barbara,long,family,horse,enigma,allison,raider,brazil,blonde,jones,55555,dude,drowssap,jeff,school,marshall,lovely,1qaz2wsx,jeffrey,caroline,franklin,booty,molly,snickers,leslie,nipples,courtney,diesel,rocks,eminem,westside,suzuki,daddy,passion,hummer,ladies,Azachary,frankie,elvis,reggie,alpha,suckme,simpson,patricia,pirate,tommy,semperfi,jupiter,redrum,freeuser,wanker,stinky,ducati,paris,natalie,babygirl,bishop,windows,spirit,tiktok,thot,pantera,monday,patches,brutus,houston,smooth,penguin,marley,forest,cream,212121,flash,maximus,nipple,bobby,bradley,vision,pokemon,champion,fireman,indian,softball,picard,system,clinton,cobra,enjoy,lucky1,claire,claudia,boogie,timothy,marines,security,dirty,admin,wildcats,pimp,dancer,hardon,veronica,abcd1234,abcdefg,ironman,wolverin,remember,great,freepass,bigred,squirt,justice,francis,hobbes,kermit,pearljam,mercury,domino,9999,denver,brooke,rascal,hitman,mistress,simon,tony,bbbbbb,friend,peekaboo,naked,budlight,electric,sluts,stargate,saints,bondage,brittany,bigman,zombie,swimming,duke,qwerty1,babes,scotland,disney,rooster,brenda,mookie,swordfis,candy,duncan,olivia,hunting,blink182,alicia,8888,samsung,bubba1,whore,virginia,general,passport,aaaaaaaa,erotic,liberty,arizona,jesus,abcd,newport,skipper,rolltide,balls,happy1,galore,christ,weasel,242424,wombat,digger,classic,bulldogs,poopoo,accord,popcorn,turkey,jenny,amber,bunny,mouse,titanic,liverpool,dreamer,everton,friends,chevelle,carrie,gabriel,psycho,nemesis,burton,pontiac,connor,eatme,lickme,roland,cumming,mitchell,ireland,lincoln,arnold,spiderma,patriots,goblue,devils,eugene,empire,asdfg,cardinal,brown,shaggy,froggy,qwer,kawasaki,kodiak,people,phpbb,light,kramer,chopper,hooker,honey,whynot,lisa,baxter,adam,snake,ncc1701d,qqqqqq,airplane,britney,avalon,sandy,sugar,sublime,stewart,wildcat,raven,scarface,elizabet,123654,trucks,wolfpack,lawrence,raymond,american,alyssa,bambam,movie,woody,shaved,snowman,tiger1,chicks,raptor,1969,stingray,shooter,france,stars,madmax,kristen,sports,jerry,789456,garcia,simpsons,lights,ryan,looking,chronic,alison,hahaha,packard,hendrix,perfect,service,spring,srinivas,spike,katie,oscar,brother,bigmac,suck,single,cannon,georgia,popeye,tattoo,texas,party,bullet,taurus,sailor,wolves,panthers,japan,strike,flowers,pussycat,chris1,loverboy,berlin,sticky,marina,tarheels,fisher,russia,connie,wolfgang,testtest,mature,bass,catch22,juice,michael1,159753,women,alpha1,trooper,hawkeye,head,freaky,dodgers,pakistan,machine,pyramid,vegeta,katana,moose,tinker,coyote,infinity,inside,letmein1,bang,control,hercules,morris,james1,tickle,outlaw,browns,billybob,pickle,test1,michele,antonio,sucks,pavilion,changeme,caesar,prelude,tanner,adrian,darkside,bowling,wutang,sunset,robbie,alabama,danger,zeppelin,juan,rusty,pppppp,nick,2001,ping,darkstar,madonna,qwe123,bigone,casino,cheryl,charlie1,mmmmmm,lakota,akota,integra,wrangler,apache,tweety,qwerty12,bobafett,simone,none,business,sterling,trevor,transam,dustin,harvey,england,2323,seattle,ssssss,rose,harry,openup,pandora,trucker,wallace,indigo,storm,malibu,weed,review,babydoll,doggy,dilbert,pegasus,pegade,joker,catfish,flipper,valerie,herman,detroit,kenneth,cheyenne,bruins,stacey,smoke,joey,seven,marino,fetish,xfiles,wonder,stinger,pizza,babe,pretty,stealth,manutd,gracie,gundam,cessna,longhorn,presario,mnbvcxz,wicked,mustang1,victory,shelly,awesome,athena,q1w2e3r4,help,holiday,knicks,street,redneck,casey,gizmo,scully,dragon1,devildog,triumph,eddie,bluebird,shotgun,peewee,hubris,ronnie,angel1,daisy,special,metallica,madman,country,impala,lennon,roscoe,omega,access14,enterpri,miranda,search,smitty,blizzard,unicorn,tight,rick,ronald,asdf1234,harrison,trigger,truck,danny,home,winnie,beauty,thailand,cadillac,castle,tyler,bobcat,buddy1,sunny,stones,asian,freddie,chuck,butt,loveyou,norton,hellfire,hotsex,indiana,short,panzer,lonewolf,trumpet,colors,blaster,12121212,fireball,logan,precious,aaron,elaine,jungle,masamune,atlanta,gold,corona,curtis,nikki,polaris,timber,theone,baller,chipper,orlando,island,skyline,dragons,dogs,benson,licker,goldie,engineer,kong,pencil,basketba,open,hornet,world,linda,barbie,chan,farmer,valentin,indians,larry,redman,foobar,travel,morpheus,bernie,target,141414,hotstuff,photos,laura,savage,holly,rocky1,dollar,turbo,design,newton,hottie,moon,blondes,4128,lestat,avatar,future,goforit,random,abgrtyu,jjjjjj,q1w2e3,smiley,goldberg,express,zipper,wrinkle1,stone,andy,babylon,dong,powers,consumer,dudley,Aster,monkey1,serenity,samurai,99999999,skeeter,lindsay,joejoe,master1,aaaaa,chocolat,christia,birthday,stephani,tang,alfred,ball,maria,sexual,maxima,sampson,buckeye,highland,kristin,seminole,reaper,bassman,nugget,lucifer,airforce,nasty,watson,warlock,2121,philip,always,dodge,chrissy,burger,bird,snatch,missy,pink,gang,maddie,holmes,huskers,piglet,photo,joanne,hamilton,dodger,paladin,christy,chubby,buckeyes,hamlet,abcdefgh,bigfoot,sunday,manson,goldfish,garden,deftones,icecream,blondie,spartan,julie,harold,charger,brandi,stormy,sherry,pleasure,juventus,rodney,galaxy,holland,escort,zxcvb,planet,jerome,wesley,blues,song,peace,david1,1966,cavalier,gambit,karen,sidney,ripper,jamie,sister,marie,martha,nylons,aardvark,nadine,minnie,whiskey,bing,plastic,anal,babylon5,chang,savannah,loser,racecar,insane,yankees1,mememe,hansolo,chiefs,fredfred,freak,frog,salmon,concrete,yvonne,sophia,stefan,8a1n80w,slick,rocker,opensesame,onessnap".split(",")
	PASSWORDSC="123456789098765,012345678909876,abgDw32fhGu58k,Bd5gHie89YA,HG54h49lklj4G53,Bd5gHie89YA,59038qyghq340fg,tgby2hnr4fv9ujm,abcplm123098tg6,3dsvi2psdfn34,a03nf93nf8,3edv45gb8ub202n,afdiounwrnnfsa,234086531230324,111111111111111,222222222222222,333333333333333,444444444444444,55555555555555,666666666666666,777777777777777,888888888888888,999999999999999,000000000000000,efh368jhr08712,asdfghjkl102938,ghfjdkslatywoec,bogu2847mshd02,1357924680aoejd,g35gk5k63l10,d0emgh4m43la,ae51wc3g7d9c,GHEITHEKA102938,HHHHHHHHHHHHH,AAAAAAAAAAAAAAAA,RRRRRRRRRRRRRRRR,sssssssssssssss,ttttttttttttttt,llllllllllllll,eeeeeeeeeeeee,uuuuuuuuuuuu,oooooooooo,aaaaaaaa,1234,123,987,567,654,56432,12345,55555,99999,34567,jhgfd,uiopl,mnbvc,ytrewq,iuhhfd,sadregh,01010101010101,1010101010101010,000111000111000,einagearghaaer,235gdfa5yhgea,aletgadfgraerga,0k9j8h7g6f5f4ed2,afdsawe4togfido,butyrhdncbuh,39n8nf93fk59,adfsafawefgaag,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,1,2,3,4,5,6,7,8,9,0".split(",")
	PASSWORDS = PASSWORDSA + PASSWORDSB
	if arg2 == "-p" then PASSWORDS = PASSWORDSC
	String={}
	String.capitalize=function(s)
	if s.len<2 then return s.upper
	return s[0].upper+s[1:].lower
	end function
	String.strip=function(t,s)
	if not t then return ""
	for b in range(0,t.len-1)
		if s.indexOf(t[b])==null then break
	end for
	if s.indexOf(t[b])>=0 then return ""
	for e in range(-1,-1*t.len)
		if s.indexOf(t[e])==null then break
	end for
	if e==-1 then return t[b:]
	return t[b:e+1]
	end function
	PasswordGenerator={}
	PasswordGenerator.init=function(samples)
	self.s=[]
	self.c={}
	for s in samples
		s=s.trim.upper
		if s.len>3 then self.s.push(s) // length limiter here
	end for
	if DEBUG then print "pwgen: debug: self.s.len: "+self.s.len
	for s in self.s
		for i in range(0,s.len-4)
		k=s[i:i+3] // limiter
		if self.c.hasIndex(k) then
			if self.c[k].indexOf(s[i+3])==null then self.c[k].push(s[i+3]) // limiter
		else
			self.c[k]=[s[i+3]] // limiter
		end if
		end for
		//wait(.1)
	end for
	end function
	PasswordGenerator.AllPasswords=function()
	r={}
	for s in self.s
		for i in range(0,s.len-4)
		self.r(s.len,s[i:i+3],r) // limiter
		//wait(.01)
		end for
	end for
		print(colorGold+"50%"+CT+" -- loading hash_table...")
		print("<align=center>"+char(171)+char(187)+"</align>")
	o={}
	for s in r.indexes
		if s.indexOf(" ")>=0 then
		n=s.split(" ")
		i=n.indexOf("")
		while i>=0
			n.remove(i)
			i=n.indexOf("",i-1)
		end while
		if n then
			for i in range(0,n.len-1)
			n[i]=String.capitalize(n[i])
			end for
		end if
		s=n.join(" ")
		else
		s=String.capitalize(s)
		end if
		if s.len<5 then continue
		a=s[0]
		b=s[1]
		if a.lower==b or "hrl'aeiou".indexOf(b)==null and "AEIOUS".indexOf(a)==null and ["Ch","Mc"].indexOf(a+b)==null then s=String.capitalize(s[1:])
		s=String.strip(s,"'-")
		o[s]=1
		o[s.lower]=1
		//wait(.01)
	end for
	r={}
	print(colorGold+"75%"+CT+" -- loading hash_table...")
	print("<align=center>"+char(171)+char(187)+"</align>")
	for p in o.indexes
		if p.len > 3 then 
			o[p[:4]] = 1
			o[String.capitalize( p[:4] ) ] = 1
			o[p[:3]] = 1
			o[String.capitalize( p[:3] ) ] = 1
		end if
		if p.len > 4 then
			o[p[-3:]] = 1
			o[String.capitalize( p[-3:] )] = 1
			o[p[-4:]] = 1
			o[String.capitalize( p[-4:] )] = 1
		end if
	end for
	for w in PASSWORDS
		o[w] = 1
	end for
	if arg1 == "false" then return o.indexes
	for i in o.indexes
		r[md5(i)]=i
	end for
	return r
	end function
	PasswordGenerator.r=function(l,s,o)
	c=s[s.len-3:]
	if self.c.hasIndex(c) and s.len<l then
		for c in self.c[c]
		self.r(l,s+c,o)
		//wait(.01)
		end for
	else
		o[s]=1
	end if
	end function
	if globals.BIGBRAIN and arg1 == "false" then 
		//if arg1 == "false" then
			return "Dictionary already expanded."
		//end if
		// print(colorGold+"0% -- loading hash_table, please wait..."+CT) // custom hash_tables currently disabled
		// HASH_TABLE = {}
		// for pw in globals.dict_a
		// 	HASH_TABLE[md5(pw)] = pw
		// 	//wait(.01)
		// end for
		// print(colorGold+"100%"+CT+" -- hash_table loaded...")
	else
		print(colorGold+"0% -- loading hash_table, please wait..."+CT)
		if arg1 == "-t" or arg2 == "-t" then 
			PasswordGenerator.init(PASSWORDSC)	
		else 
			PasswordGenerator.init(PASSWORDS)
		end if
		//PasswordGenerator.init(globals.dict_a)
		//PasswordGenerator.init(globals.dict_a+PASSWORDS)
		//PasswordGenerator.init(PASSWORDS[0:arg2])
		//
		print(colorGold+"10%"+CT+" -- loading hash_table...")
		print("<align=center>"+char(171)+char(187)+"</align>")
    HASH_TABLE = {}
		HASH_TABLE=PasswordGenerator.AllPasswords
    //if HASH_TABLE.len <= 1 then globals.HASH_TABLE = PasswordGenerator.AllPasswords else print "pwgen: HASH_TABLE already loaded; bypassing Markov"// trying this out, might be a bad idea
		print(colorGold+"100%"+CT+" -- hash_table loaded...")
		print("<b>Magnum Cerebrum: expanding onboard dictionary...</b>")
		// globals.dict_a = HASH_TABLE.values
		if arg2 == "-p" then globals.dict_a(HASH_TABLE.values + PASSWORDSA + PASSWORDSB + PASSWORDSC) else globals.dict_a(HASH_TABLE.values+PASSWORDS)
		globals.BIGBRAIN = true
		if arg1 == "false" then
			return "Dictionary expaneded."
		end if
	end if
	table = "tp"
	if arg1 == "hash" then table = "t5"
  table_path = get_custom_object.HOME[table]
  t_par_path = table_path.remove("/tables/"+table)
  t_par = globals.get_file(t_par_path) // usually /root/rkit
  if not t_par then
    print "pwgen: "+t_par_path+" not found;"+char(10)+"-- defaulting to currentPath"
    t_par_path = globals.currentPath 
    t_par = globals.get_file(t_par_path)
    table_path = t_par_path+"/tables/"+table
  end if
  
  print colorGold+"Writing tables to: "+table_path
  command.mkdir(t_par_path+"/tables")
  command.mkdir(table_path)
  if not globals.get_file(table_path) then return "pwgen: write error; check permissions"
  


	//table_path = get_custom_object.HOME[table]//.split("/tables/t5")[0]
	//print colorGold+"Writing tables to: "+table_path//+"/tables/"+table
  //print command.mkdir(table_path)
  // t_par = globals.get_file(table_path)
  // if typeof(t_par) != "file" then 
  //   print command.mkdir(currentPath+"/"+"tables")
  //   t_par = globals.get_file(currentPath+"/"+table)
  //   if typeof(t_par) != "file" then return colorWarning+"pwgen: write error; check permissions"
  //   table_path = t_par.path
  // end if
  // t_par = tpar.parent
  // command.mkdir(t_par.path)
  //



	print(colorGold+"Hash Table: ["+colorWhite+HASH_TABLE.len+"</color>]")
	print("<align=center>"+char(171)+char(187)+"</align>")
	out=[]
	count=0
	lol=1
	for i in HASH_TABLE
		count=count+1
		if arg1 == "hash" then
			//out=out+char(10)+i["key"]+"="+i["value"]
			out.push(i["key"]+"="+i["value"])
		else
			//out=out+char(10)+i["value"]
			out.push(i["value"])
		end if
		output = out.join(char(10))
		if output.len > 159900 then
			print(lol+" "+out.len+" "+output.len)
			//localmachine.touch(home_dir+"/rkit/tables/"+table,lol+"")
			//file=localmachine.File(home_dir+"/rkit/tables/"+table+"/"+lol)
			localmachine.touch(table_path,lol+"")
			file=globals.get_file(table_path+"/"+lol+"")
      if not file then return colorWarning+"pwgen: write error; check tables path/permissions"
			file.set_content(output)
			command.perms("o-rwx",file)
			out=[]
			lol=lol + 1
		end if
		//wait(.01)
	end for

	if out.len > 0 then
		lol = lol + 1
		print(lol+" "+HASH_TABLE.len+" "+out.len)
		localmachine.touch(table_path,lol+"")
		file=globals.get_file(table_path+"/"+lol+"")
    if not file then return colorWarning+"pwgen: write error; check tables path/permissions"
		file.set_content(out.join(char(10)))
		command.perms("o-rwx",file)
	end if

	return file.path
end function
if DEBUG then print("<size=75%>loaded ...pwgen.5pk...(19.470kb)")

  // glosure by maho_citrus
  command.glosure = function(arg1, arg2=0, arg3=0, arg4=0)
    Error = function(msg) //This is up to implementation to decide.
      return print("<color=red><noparse>" + @msg + "</noparse></color>") //reference implementation simply panics. 
    end function
    tree = function(anyObject, depth = 5) //basically str() with custom depth limit, this walk the tree with recursion until everything is consumed.
      if depth == 0 then return "..."
      if @anyObject isa map then
        if hasIndex(anyObject, "classID") then return @anyObject.classID //doesnt unfold Grey Hack object anymore
        ret = []
        for pair in anyObject
          ret.push(tree(@pair.key, depth - 1) + ": " + tree(@pair.value, depth - 1))
        end for
        return "{" + ret.join(", ") + "}"
      else
        if @anyObject isa funcRef or anyObject isa number then return "" + @anyObject
        if anyObject isa string then return """" + anyObject + """"
        if anyObject isa list then
          ret = []
          for item in anyObject
            ret.push(tree(@item, depth - 1))
          end for
          return "[" + ret.join(", ") + "]"
        end if
        if anyObject == null then return "null"
        return "" + anyObject 
      end if
    end function
    reader = function(codeStr) //code string to s-expression
      codeStr = values(codeStr)
      stack = [[]]
      while len(codeStr)
        token = []
        c = codeStr.pull
        if (", " + char(9) + char(10) + char(13)).indexOf(c) != null then //ignore whitespace
          continue
        else if c == "(" then //parse a new list
          stack.push([])
        else if c == ")" then //end a list
          if len(stack) < 2 then return Error("Glosure: Error: Unbalanced parenthesis.")
          curr = stack.pop
          stack[-1].push(curr)
        else if indexOf("0123456789.", c) != null then //tokenize number
          token.push(c)
          while len(codeStr) and indexOf("0123456789.", codeStr[0]) != null
            token.push(codeStr.pull)
          end while
          stack[-1].push(val(token.join("")))
        else if c == "'" then //tokenize string
          token.push(c)
          while len(codeStr) and codeStr[0] != "'"
            c = codeStr.pull
            if c == "\" then //"
              if codeStr[0] == "t" then
                token.push(char(9))
                codeStr.pull
              else if codeStr[0] == "n" then
                token.push(char(10))
                codeStr.pull
              else if codeStr[0] == "r" then
                token.push(char(13))
                codeStr.pull
              else
                token.push(codeStr.pull)
              end if
            else
              token.push(c)
            end if
          end while
          codeStr.pull
          stack[-1].push(token.join(""))
        else if c == ";" then //ignore comment
          while len(codeStr) and codeStr[0] != char(10)
            codeStr.pull
          end while
        else //tokenize symbol
          token.push(c)
          while len(codeStr) and (" .'();" + char(9) + char(10) + char(13)).indexOf(codeStr[0]) == null
            token.push(codeStr.pull)
          end while
          stack[-1].push(token.join(""))
        end if
      end while
      if len(stack) != 1 then return Error("Glosure: Error: Unbalanced parenthesis.")
      return ["begin"] + stack[0]
    end function
    Env = function(__outer) //environment for Glosure, only build new environment when calling lambda.
      Error = @Error
      env = {}
      env.classID = "env"
      env.__outer = __outer
      env.__local = {}
      env.get = function(symbol)
        if hasIndex(self.__local, @symbol) then return @self.__local[@symbol]
        if self.__outer then return @self.__outer.get(symbol)
        return Error("Glosure: Runtime Error: Unknown symbol '" + symbol + "'.")
      end function
      env.set = function(symbol, value)
        self.__local[@symbol] = @value
        return @value
      end function
      return env
    end function
    eval = function(expr, env) //evaluate Glosure s-expression
      if not @expr isa list then
        if not @expr isa string then return @expr
        if expr[0] == "'" then return expr[1:] else return env.get(expr)
      end if
      if not len(expr) then return null
      first = @expr[0]
      if @first == "def" then //bind value to symbol
        if len(@expr) < 3 then return Error("Glosure: Runtime Error: def keyword requires 2 arguments.")
        return env.set(@expr[1], eval(@expr[2], env))
      else if @first == "if" then //if statement
        if len(@expr) < 3 then return Error("Glosure: Runtime Error: if keyword requires 2 or 3 arguments.")
        if eval(@expr[1], env) then return eval(@expr[2], env)
        if len(@expr) > 3 then return eval(@expr[3], env) else return null
      else if @first == "while" then //while loop, with no break keyword.
        if len(@expr) != 3 then return Error("Glosure: Runtime Error: while keyword requires 2 arguments.")
        result = null
        while eval(@expr[1], env)
          result = eval(@expr[2], env)
        end while
        return @result
      else if @first == "lambda" then //lambda statement
        if len(@expr) < 3 then return Error("Glosure: Runtime Error: lambda keyword requires 2 or more arguments.")
        if not @expr[1] isa list then return Error("Glosure: Runtime Error: lambda requires a list as params.")
        return {
          "classID": "lambda",
          "params": @expr[1],
          "body": expr[2:],
          "env": @env,
        }
      else if @first == "begin" then //evaluate each argument and return the last one.
        result = null
        for stmt in expr[1:]
          result = eval(@stmt, env)
        end for
        return @result
      else if @first == "exec" then //interpret a string as Glosure code.
        if len(@expr) != 2 then return Error("Glosure: Runtime Error: exec keyword requires 1 argument.")
        return execute(eval(@expr[1], env), env)
      else if @first == "eval" then //evaluate a list as Glosure code.
        if len(@expr) != 2 then return Error("Glosure: Runtime Error: eval keyword requires 1 argument.")
        return eval(eval(@expr[1], env), env)
      else if @first == "glosure" then //build a "glosure"(host function), advanced feature, extremely dangerous
        if len(@expr) < 3 then return Error("Glosure: Runtime Error: glosure keyword requires 2 or more arguments.")
        if not @expr[1] isa list then return Error("Glosure: Runtime Error: glosure requires a list as params.")
        if len(@expr[1]) > 5 then return Error("Glosure: Runtime Error: glosure can only take 5 or less params.")
        lambda = {
          "classID": "lambda",
          "params": @expr[1],
          "body": expr[2:],
          "env": @env,
        }
        __eval = @eval
        __env = @env
        buildGlosure = function
          __eval = @outer.__eval
          __env = @outer.__env
          lambda = @outer.lambda
          glosure0 = function()
            return __eval([lambda], __env)
          end function
          glosure1 = function(arg0)
            return __eval([lambda, @arg0], __env)
          end function
          glosure2 = function(arg0, arg1)
            return __eval([lambda, @arg0, @arg1], __env)
          end function
          glosure3 = function(arg0, arg1, arg2)
            return __eval([lambda, @arg0, @arg1, @arg2], __env)
          end function
          glosure4 = function(arg0, arg1, arg2, arg3)
            return __eval([lambda, @arg0, @arg1, @arg2, @arg3], __env)
          end function
          glosure5 = function(arg0, arg1, arg2, arg3, arg4)
            return __eval([lambda, @arg0, @arg1, @arg2, @arg3, @arg4], __env)
          end function
          if len(lambda.params) == 0 then return @glosure0
          if len(lambda.params) == 1 then return @glosure1
          if len(lambda.params) == 2 then return @glosure2
          if len(lambda.params) == 3 then return @glosure3
          if len(lambda.params) == 4 then return @glosure4
          return @glosure5
        end function
        return buildGlosure
      else if @first == "dot" then //invoke host method. Warning: more arguments than a method can take will result in crash and the Glosure interpreter cannot catch this error!
        length = []
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object)
        end function
        length.push(@temp)
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object, @args[0])
        end function
        length.push(@temp)
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object, @args[0], @args[1])
        end function
        length.push(@temp)
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object, @args[0], @args[1], @args[2])
        end function
        length.push(@temp)
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object, @args[0], @args[1], @args[2], @args[3])
        end function
        length.push(@temp)
        temp = function(object, method, args)
          method = @object[@method]
          return method(@object, @args[0], @args[1], @args[2], @args[3], @args[4])
        end function
        length.push(@temp)
        if len(expr) < 3 then return Error("Glosure: Runtime Error: dot keyword requires at least 2 arguments.")
        if len(expr) > len(length) then return Error("Glosure: Runtime Error: dot keyword take at most " + (len(length) - 1) + " params but received " + (len(expr) - 1) + " arguments.")
        args = []
        for arg in expr[1:]
          args.push(eval(@arg, env))
        end for
        object = @args[0]
        method = @args[1]
        args = args[2:]
        run = @length[len(args)]
        return run(@object, @method, args)
      else if @first == "list" then
        args = []
        for arg in expr[1:]
          args.push(eval(@arg, env))
        end for
        return args
      else if @first == "map" then
        args = []
        for arg in expr[1:]
          args.push(eval(@arg, env))
        end for
        if len(args) % 2 != 0 then args.push(null) //append a null if the last one does not have a pair.
        ret = {}
        for i in range(0, len(args) - 1, 2)
          ret[@args[i]] = @args[i + 1]
        end for
        return @ret
      else if @first == "context" then
        return env.__local
      else
        func = eval(@first, env)
        args = expr[1:]
        evaluatedArgs = []
        if @func isa map and hasIndex(func, "classID") and func.classID == "lambda" then
          if len(args) > len(func.params) then return Error("Glosure: Runtime Error: calling a lambda takes at most " + len(func.params) + " params but received " + len(args) + " arguments.")
          for arg in args
            evaluatedArgs.push(eval(@arg, env))
          end for
          while len(evaluatedArgs) < len(func.params)
            evaluatedArgs.push(null) //append null for not enough arguments
          end while
          newEnv = Env(func.env)
          for i in indexes(func.params)
            newEnv.set(@func.params[i], @evaluatedArgs[i])
          end for
          result = null
          for bodyExpr in func.body
            result = eval(@bodyExpr, newEnv)
          end for
          return @result
        else if @func isa funcRef then
          for arg in args
            evaluatedArgs.push(eval(@arg, env))
          end for
          length = []
          temp = function(args, func)
            return func()
          end function
          length.push(@temp)
          temp = function(args, func)
            return func(@args[0])
          end function
          length.push(@temp)
          temp = function(args, func)
            return func(@args[0], @args[1])
          end function
          length.push(@temp)
          temp = function(args, func)
            return func(@args[0], @args[1], @args[2])
          end function
          length.push(@temp)
          temp = function(args, func)
            return func(@args[0], @args[1], @args[2], @args[3])
          end function
          length.push(@temp)
          temp = function(args, func)
            return func(@args[0], @args[1], @args[2], @args[3], @args[4])
          end function
          length.push(@temp)
          if len(evaluatedArgs) > len(length) - 1 then return Error("Glosure: Runtime Error: glosure takes at most " + (len(length) - 1) + " params but received " + len(evaluatedArgs) + " arguments.")
          run = @length[len(evaluatedArgs)]
          return run(evaluatedArgs, @func)
        end if
      end if
    end function
    GlobalEnv = function
      globalEnv = Env(null) //global and general methods do not have access to environment. those are for keywords.
      globalEnv.__local["&"] = function(a, b)
        return @a and @b
      end function
      globalEnv.__local["|"] = function(a, b)
        return @a or @b
      end function
      globalEnv.__local["!"] = function(a)
        return not @a
      end function
      globalEnv.__local["=="] = function(a, b)
        return @a == @b
      end function
      globalEnv.__local["!="] = function(a, b)
        return @a != @b
      end function
      globalEnv.__local[">="] = function(a, b)
        return @a >= @b
      end function
      globalEnv.__local["<="] = function(a, b)
        return @a <= @b
      end function
      globalEnv.__local[">"] = function(a, b)
        return @a > @b
      end function
      globalEnv.__local["<"] = function(a, b)
        return @a < @b
      end function
      globalEnv.__local["+"] = function(a, b)
        return @a + @b
      end function
      globalEnv.__local["-"] = function(a, b)
        return @a - @b
      end function
      globalEnv.__local["*"] = function(a, b)
        return @a * @b
      end function
      globalEnv.__local["/"] = function(a, b)
        return @a / @b
      end function
      globalEnv.__local["^"] = function(a, b)
        return @a ^ (@b)
      end function
      globalEnv.__local["%"] = function(a, b)
        return @a % @b
      end function
      globalEnv.__local.at = function(a, b)
        return @a[@b]
      end function
      globalEnv.__local.set = function(a, b, c)
        (@a)[@b] = @c
        return @c
      end function
      general = {"active_user": @active_user, "bitwise": @bitwise, "clear_screen": @clear_screen, "command_info": @command_info, "current_date": @current_date, "current_path": @current_path, "exit": @exit, "format_columns": @format_columns, "get_ctf": @get_ctf, "get_custom_object": @get_custom_object, "get_router": @get_router, "get_shell": @get_shell, "get_switch": @get_switch, "home_dir": @home_dir, "include_lib": @include_lib, "is_lan_ip": @is_lan_ip, "is_valid_ip": @is_valid_ip, "launch_path": @launch_path, "mail_login": @mail_login, "nslookup": @nslookup, "parent_path": @parent_path, "print": @print, "program_path": @program_path, "reset_ctf_password": @reset_ctf_password, "typeof": @typeof, "user_bank_number": @user_bank_number, "user_input": @user_input, "user_mail_address": @user_mail_address, "wait": @wait, "whois": @whois, "to_int": @to_int, "time": @time, "abs": @abs, "acos": @acos, "asin": @asin, "atan": @atan, "ceil": @ceil, "char": @char, "cos": @cos, "floor": @floor, "log": @log, "pi": @pi, "range": @range, "round": @round, "rnd": @rnd, "sign": @sign, "sin": @sin, "sqrt": @sqrt, "str": @str, "tan": @tan, "yield": @yield, "slice": @slice, "params": @params, "globals": @globals, "true": true, "false": false, "null": null}
      for method in general + string + list + map
        globalEnv.__local[@method.key] = @method.value
      end for
      return globalEnv
    end function
  
    execute = function(codeStr, env)
      return eval(reader(codeStr), env)
    end function
    repl = function(env)
      while true
        codeStr = user_input("</> ")
        if codeStr == ";quit" then break
        result = eval(reader(codeStr), env)
        if @result isa string then print(result) else print(tree(@result))
      end while
    end function
  
    prepareCode = "(def BUFFER (at globals 'BUFFER'))" //This one is hardcoded code you can run at start up.
    if not hasIndex(globals, "glosureEnv") then
      globals.glosureEnv = Env(GlobalEnv)
      execute(prepareCode, glosureEnv)
      env = Env(glosureEnv)
      execute(prepareCode, env)
    end if
  
    helpMsg = "Usage: glosure -- invoke Glosure REPL, type ;quit to quit.
  Usage: glosure [-e|exec] ""code""  -- execute Glosure code.
  Glosure interpreter version: b14abb5. For a more detailed guide read https://github.com/rocketorbit/Glosure/blob/main/Tutorial.md
  <b>Warning: This command is a programming language! Your error may result in crash!</b>
  
  Short reference:
  (function arg1 arg2 argn) essentially behaves like function(arg1, arg2, argn) in miniscript
  This language has 7 datatypes, string number list map null are the same as GreyScript string number list map null, glosure means GreyScript function, lambda means a Glosure ""anonymous function""
  Use 'hi' to repersent a string ""hi""
  Use 42 to repersent a number 42, true is a predefined variable with a value 1, false is a predefined variable with a value 0.
  null is a predefined variable with a value null.
  Use (list 1 2 'a') to repersent a list [1, 2, ""a""]
  Use (map 'a' 1 'b' 2) to repersent a map {""a"": 1, ""b"": 2}, globals is a predefined map which references the GreyScript globals map.
  Use (def name 'value') to define a variable name with a value ""value""
  Use (lambda (arguments) (body)) to define an anonymous lambda expression(aka function), you can bind it to a variable name with syntax like (def square (lambda (x) (* x x))). This is the only native datatype and you should NEVER pass this through API.
  Use (glosure (arguments) (body)) to define an anonymous glosure(aka GreyScript function), you can bind it to a variable name with syntax like (def square (glosure (x) (* x x))). This is only used for GreyScript interop and you should not use this when you can use lambda instead.
  Use (while expression statement) to loop without recursion.
  Use (if expression statement optional_else_statement) to use if or if-else statement.
  Use (function_name argument_1 argument_2 argument_N) to call a binded lambda or a binded glosure.
  Use (dot object method_name argument_1 argument_2 argument_N) to access a method under a grey hack object. This is dangerous and can cause crash if used incorrectly, read Manual.exe while using it.
  (at name index) essentially works like name[index], you can use it on any container.
  (set name index value) essentially works like name[index] = value, you can use it on any container. It can also used to assign any glosure to host env with globals<b>Warning: Advanced feature are not for people who dont know what they are doing! Your error will very likely result in crash!</b>
  "
    if arg1 == "help" or arg1 == "-h" then return helpMsg
    if arg1 == "-e" or arg1 == "exec" then return execute(arg2, glosureEnv)
    return repl(glosureEnv)
  end function
  //
  // htop by redit0
  command.htop = function(arg1=0, arg2=0,arg3=0,arg4=0)
    colorize = function(num, v, perc = 0)
      p = ""
      if perc then p = "%"
      if num > 94 then return "<color=#c30000><b>" + v + p + "</b></color>"
          if num > 89 then return "<color=#ffa500><b>" + v + p + "</b></color>"
          if num > 79 then return "<color=#dbd700><b>" + v + p + "</b></color>"
      return "<color=#85b8ff><b>" + v + p + "</b></color>"
    end function
    if @arg1 != 0 then
      if ["string","number","shell","computer"].indexOf(typeof(@arg1)) == null then return "Invalid argument: "+typeof(@arg1)+": "+@arg1
      top_usage = "htop || actually htop"+char(10)+
      "<b>Usage: "+colorGold+"htop</color> -- show processes running on the active host_computer"+char(10)+
      "-- to end the running process, use the command:<b> purge -d [opt:name]"+char(10)+
      "---- or note the daemon name printed on the screen and "+char(10)+
      "---- remove the corresponding line from <b>/root/5hell.d</b>"+char(10)+
      "---- or delete the file entirely"+char(10)+
      "-- if the file cannot be created, then the process must be exited with <b>ctrl+c"+char(10)+
      "-- when glasspool is active:"+char(10)+
      "-- the active shell/computer is the active host_computer"+char(10)+
      "<b>Usage: htop -- show processes running on active host_computer"+char(10)+
      "--eg: htop"+char(10)+
      "<b>Usage: htop [#] -- show processes running on the buffer object at the specified index."+char(10)+
      "--eg: htop 1"+char(10)+
      "<b>Usage: htop [shell|computer] -- show processes running on the piped object."+char(10)+
      "--eg: clipa @B 1 | htop"+char(10)+
      "--eg: rsi 1 7 | htop"
      if arg1 == "help" or arg1 == "-h" then return top_usage
      if typeof(arg1) == "number" then arg1 = str(arg1)
      if typeof(arg1) == "shell" then
        locals.top_comp = arg1.host_computer
      else if typeof(arg1) == "computer" then
        locals.top_comp = arg1
      else if typeof(arg1.to_int) == "number" then
        idx = arg1.to_int
        if idx >= 0 and idx < globals.BUFFER.len then temp_comp = globals.BUFFER[idx] else return "BUFFER: invalid selection."
        if typeof(temp_comp) == "shell" then
          locals.top_comp = temp_comp.host_computer
        else if typeof(temp_comp) == "computer" then
          locals.top_comp = temp_comp
        else
          return "BUFFER: invalid object type: " + typeof(temp_comp)
        end if
      else
        return "Invalid argument: "+typeof(arg1)+": "+arg1
      end if
    else
      locals.top_comp = globals.localmachine
    end if
    hostname = locals.top_comp.get_name
    manager = new DaemonManager
    daemon = manager.Start("htop", hostname + " - " + locals.top_comp.public_ip + "::" + locals.top_comp.local_ip)
    while (daemon and manager.Check(daemon)) or not manager.__initialized
          lines = locals.top_comp.show_procs.split("\n")[1:]
          procs = []
          users = []
          memory = 0
          cpu = 0
          admin = 0
          for line in lines
              parts = line.split(" ")
              process = {"user":parts[0], "pid":parts[1], "cpu":parts[2][:-1].val, "memory":parts[3][:-1].val, "command":parts[4].replace("5hell",colorRed+"5"+colorWhite+"hell")}
              procs.push(process)
          end for
          for proc in procs
              if proc.user == "root" and proc.command == "dsession" then admin = 1
              if (proc.command == "dsession" or proc.command == "Xorg") and users.indexOf(proc.user) == null then users.push(proc.user)
              memory = memory+proc.memory
              cpu = cpu+proc.cpu
          end for
          cpu_squares = ceil(20*(cpu/100))
          cpu_blanks = 20-cpu_squares
          cpu_bar = colorize(cpu,"#"*cpu_squares) + "<color=#ffffff00>" + "#"*cpu_blanks + "</color>"
          memory_squares = ceil(20*(memory/100))
          memory_blanks = 20-memory_squares
          memory_bar = colorize(memory,"#"*memory_squares) + "<color=#ffffff00>" + "#"*memory_blanks + "</color>"
          output = "<color=#eeeeee><b><size=110%>Monitoring: "+hostname+"</size><size=90%>"+char(10)+
      "[" + locals.top_comp.public_ip + "] [" + locals.top_comp.local_ip + "]"+char(10)+
      "Daemon: "+daemon+"</size></b></color>" + char(10)*2 +
          "Running Processes: " + procs.len + char(10) +
          "Users Online: " + users.len + char(10) +
          "CPU Utilization: [" + cpu_bar + "]==[ "+colorize(cpu,cpu,1)+" ]" + char(10) +
          "RAM Utilization: [" + memory_bar + "]==[ "+colorize(memory,memory,1)+" ]" + char(10)*2
          if admin then output = output + "<size=140%><mark=c3000099>" + " "*12 + "<b>ADMIN ONLINE</b>" + " "*12 + "</mark></size><color=#ffffff00>|</color>" + char(10)*2
          procList = "<color=#666666><b><voffset=0.5em>USER<pos=130>PID<pos=210>CPU<pos=290>RAM<pos=370>COMMAND</voffset></b></color>" + char(10)
          for proc in procs
              if proc.user == "root" then
                  procList = procList+colorize(99,"root")
              else if proc.user == "guest" then
                  procList = procList+"<color=#666666><b>guest</b></color>"
              else
                  procList = procList+colorize(1,proc.user)
              end if
              procList = procList + "<pos=130><color=#77aa33><b>" + proc.pid + "</b></color><pos=210>"+colorize(proc.cpu,proc.cpu,1)
              procList = procList + "<pos=290>"+colorize(proc.memory,proc.memory,1)
              procList = procList + "<pos=370><color=#00709d><b>" + proc.command + "</b></color>" + char(10)
          end for
          output = output + procList
          print(output, 1)
          wait 0.5
    end while
  end function
  
  
  
  //////// contributed shared functions ///////////////
  
  // regex engine for greyscript
  // transcribed from C code provided by Princeton U.
  // useage: re.match( String: regex pattern, Char Array (list): text to parse )
  // returns 1 if match and 0 if no match
  // regex engine, translated from C code provided by Princeton U., by Plu70
  re = {}
  re.match = function(regexp, text) 
    if DEBUG then print("<b> in globals.re(gex)")
    if regexp[0] == "^" then
      regexp.pull
      return re.match_here(regexp,text)
    end if
    while text.len > 0
      if re.match_here(regexp, text) then return 1
      text.pull
    end while
    return 0
  end function
  re.match_here = function(regexp, text)
    if not regexp then return 1
    if regexp.len > 1 and regexp[1] == "#" then 
      return self.match_star(regexp[0], regexp[2:], text)
    end if
    if regexp[0] == "$" and not regexp.hasIndex(1) then
      if text.hasIndex(1) then return 0 else return 1
    end if
    if text.len > 0 and (regexp[0] == "*" or regexp[0] == text[0]) then 
      return self.match_here(regexp[1:], text[1:])
    end if
    return 0
  end function
  re.match_star = function(c, regexp, text)
    while text.len and (text[0] == c or c == "*") 
      if re.match_here( regexp, text) then return 1
      text = text[1:]
    end while
    return 0
  end function
  if DEBUG then print("<size=75%>loaded regex engine...</size>")
  // end regex engine //
  //
  // checkUser function by Corvus, additions by Plu70
  checkUser = function(result)
    if DEBUG then print("checkUser: "+@result)
    if typeof(@result) == "function" then return "function"
    user = ""
    rfile = null
    file = null
    if result == null then return "null"
    if typeof(result) != "shell" and typeof(result) != "ftpshell" and typeof(result) != "file" and typeof(result) != "computer" then return "???"
    if typeof(result) == "computer" then
      file = result.File("/home")
      rfile = result.File("/root")
    else if typeof(result) == "shell" or typeof(result) == "ftpshell" then
      file = result.host_computer.File("/home")
      rfile = result.host_computer.File("/")
    end if
    if rfile and rfile.has_permission("w") then
      user = "root"
    else if rfile and file then
      for folder in file.get_folders
        if folder.has_permission("w") and folder.name != "guest" then user = folder.name
      end for
    end if
    if typeof(result) == "file" then
      if DEBUG then print "check_user: found file"
      if not p_validate(result,"name") then return "null"
      file = result
      if file.name != "/" then
        file = file.parent
        while file.name != "/"
          file = file.parent
        end while
      end if
      if not file then return "???"
      if file.has_permission("w") then user = "root"
      for folder in file.get_folders
        if folder.name == "root" then
          if folder.has_permission("w") then user = "root"
        end if
        if folder.name == "home" and user != "root" then
          for sub in folder.get_folders
            if sub.has_permission("w") and sub.name != "guest" then user = sub.name
          end for
        end if
      end for
    end if
    if user == "" then user = "guest"
    return user // by Corvus
  end function
  // end check user //
  //
  // DAEMON manager, by redi0
  //
  DaemonManager = {
    "__comp": globals.localmachine,
    "__file": null,
    //"__filePath": "/root/5hell.d",
    "__filePath": globals.currentPath+"/5hell.d",
    "__initialized": 0,
    "__type": {
      "kore": "kore",
      "hashim": "hashim",
      "htop": "htop",
      "outmon": "outmon",
      "rsi": "rsi"}}// greyscript doesn't like these closing braces on their own line for whatever reason
  
  DaemonManager.__getNext = function(type)
    if not self.__initialized then return null
    max = 0
    lines = self.List
    for line in lines
      if line == "" then continue
      if line.indexOf(self.__type[type]) != null then
        identifier = line.split(" ")[0]
        if identifier.indexOf("_") == null then continue
        parts = identifier.split("_")
        if parts.len != 2 then continue
        if typeof(parts[1].to_int) != "number" then continue
        test = parts[1].to_int
        if test > max then max = test
      end if
    end for
    return max + 1
  end function
  
  
  DaemonManager.Check = function(daemon)
    if typeof(@daemon) != "string" then return
    if not self.__initialized then return 0
    lines = self.List
    for line in lines
      parts = @line.split(" ")
      if parts[0] == daemon then return 1
    end for
    return 0
  end function

  DaemonManager.List = function
    if not self.__initialized then return []
    if not self.__file then return []
    content = self.__file.get_content
    if not content then return []
    lines = content.split(char(10))
    for idx in range(0,lines.len - 1)
      if lines[idx] == "" then
        lines.remove(idx)
        idx = idx - 1
      end if
    end for
    return lines
  end function
  
  // DaemonManager.Init = function
  //   file = self.__comp.File(self.__filePath)
  //   if not file then
  //     //self.__comp.touch("/root", "5hell.d")
  //     self.__comp.touch(currentPath,"5hell.d")
  //     file = self.__comp.File(self.__filePath)
  //     if not file then
  //       print("Error: could not create 5hell.d." )
  //       return
  //     end if
  //   end if
  //   // temp hack
  //   kit = command.tree("/","rkit","1","N")
  //   if kit then file.move(kit.path,file.name)
  //   self.__file = file
  //   self.__initialized = 1
  // end function

  DaemonManager.Init = function
    file = self.__comp.File(self.__filePath)
    if not file then
      kit = command.tree("/","rkit","1","N")
      if kit then 
        self.__comp.touch(kit.path,"5hell.d")
        self.__filePath = kit.path+"/5hell.d" 
      else
        self.__comp.touch(currentPath,"5hell.d") // currentPath/5hell.d
      end if
      file = self.__comp.File(self.__filePath)
      if not file then
        print("Error: could not create 5hell.d." )
        return
      end if
    end if
    self.__file = file
    self.__initialized = 1
  end function
  
  DaemonManager.Start = function(type, note = "")
    if not self.__type.hasIndex(@type) then
      print("Error: invalid type: " + @type)
      return
    end if
    if not self.__initialized then self.Init
    if typeof(@note) != "string" then note = ""
    if note.len > 0 then note = " "+note
    next = "0" + self.__getNext(type)
    daemon = self.__type[type]+"_"+next[-2:]
    lines = self.List
    lines.push(daemon+note)
    lines.sort
    result = self.__file.set_content(lines.join(char(10)))
    if result == 1 then return daemon
    if result == 0 then
      print("Error: could not write to 5hell.d.")
    else if typeof(result) == "string" then
      print("Error: " + result)
    end if
    self.__initialized = 0
  end function
  
  DaemonManager.Stop = function(daemon)
    del = function(file)
      result = file.delete
      if result == "" then
        return 1
      else
        print "Error: " + result
        return 0
      end if
    end function
    if typeof(@daemon) != "string" then return
    if not self.__initialized then self.Init
    lines = self.List
    if lines == [] then
      if del(self.__file) then return 1
    end if
    for idx in range(0,lines.len - 1)
      line = lines[idx]
      parts = @line.split(" ")
      if parts[0] == daemon then
        print("stopping " + parts[0])
        lines.remove(idx)
        if lines.len == 0 then
          if del(self.__file) then return 1
        end if
        break
      end if
    end for
    result = self.__file.set_content(lines.join(char(10)))
    if result == 1 then return 1
    if result == 0 then
      print("Error: could not write to 5hell.d.")
    else if typeof(result) == "string" then
      print("Error: " + result)
    end if
    return 0
  end function
  ////// end daemon manager /////////////
